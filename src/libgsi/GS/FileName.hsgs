module GS.FileName (gsfile_name_extension_get, gsfile_name_extensions_get, gsfile_name_extension_set, gsfile_name_extensions_set) where

$gsimports

$gsdeclare file.name.extension.get-w gsfile_name_extension_get_w

gsfile_name_extensions_get = [gs:value| drop 1 ∘ split-on rune.≡ r{.} ∘ last-strict ∘ split-on rune.≡ r{/} |]

gsfile_name_extension_get = [gs:value| λ 'fn. file.name.extension.get-w (λ 'e. e) fn |]

gsfile_name_extension_get_w = [gs:value| λ 'ex. λ 'fn. analyze fn.
    case 'c:'fn1. (analyze rune.≡ c r{.}.
        case true. file.name.extension.get-w (λ 'e. e)  fn1
        case false. (analyze rune.≡ c r{/}.
            case true. file.name.extension.get-w (λ 'e. e) fn1
            case false. file.name.extension.get-w (ex ∘ (λ 'e. c:e)) fn1
        )
    )
    case nil. ex nil
|]

$gsdeclare file.name.extension.set-w gsfile_name_extension_set_w

gsfile_name_extension_set = [gs:value| λ 'ex. λ 'fn. file.name.extension.set-w (λ 'e. e) (λ 'e. e) ex fn |]

gsfile_name_extension_set_w = [gs:value| λ 'bd. λ 'exd. λ 'ex. λ 'fn. analyze fn.
    case 'c:'fn1. (analyze rune.≡ c r{.}.
        case true. file.name.extension.set-w (bd ∘ exd) (λ 'e. c:e) ex fn1
        case false. file.name.extension.set-w bd (exd ∘ (λ 'e. c:e)) ex fn1
    )
    case nil. bd (r{.} : ex)
|]

gsfile_name_extensions_set = [gs:value| λ 'exs. (file.name.path-components.modify ∘ last.modify ∘ tokens.modify rune.≡ r{.} ∘ tail.modify) (const exs) |]

gsfile_name_path_components_modify = [gs:value| λ 'f. λ 'fn. analyze fn.
    case r{/}:'fn1. (:) r{/} $ tokens.modify rune.≡ r{/} f fn1
    case _. tokens.modify rune.≡ r{/} f fn
|]
