{-# LANGUAGE TemplateHaskell #-}
module GSI.Maybe (gsmaybe, gsmaybe_out, gsmaybe_map, gsnothing, gsjust, gsnothing_view, gsjust_view) where

import GSI.Syn (gsvar)
import GSI.Value (gslambda_value, gsconstr, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)

$gsimports

gsmaybe = [gs:value| λ 'ek. λ 'sk. λ 'mb. analyze mb.
    case nothing. ek
    case just 'x. sk x
|]

gsmaybe_out = [gs:value| λ 'x0. λ 'mb. analyze mb.
    case nothing. x0
    case just 'x. x
|]

gsmaybe_map = [gs:value| λ 'f. λ 'mb. analyze mb.
    case nothing. nothing
    case just 'x. just (f x)
|]

gsnothing = $gsconstr (gsvar "nothing") []
gsjust = $gslambda_value $ \ x -> $gsbcconstr (gsvar "just") [ $gsav x ]

gsnothing_view =  $gsbcconstr_view "nothing"
gsjust_view =  $gsbcconstr_view "just"
