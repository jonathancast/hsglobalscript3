{-# LANGUAGE TemplateHaskell, ScopedTypeVariables #-}
module GSI.List (gsappend, gsconcat, gsfoldl, gsfoldr, gsmap, gsfilter, gsrepeat, gsreplicate, gszip, gsmap2, gsmap3, gsdrop, gslist_eq, gslist_member, gslist_not_member, gscons, gsnil, gscons_view, gsnil_view) where

import GSI.Util (gshere)
import GSI.Syn (gsvar)
import GSI.Value (GSValue(..), gslambda_value, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)
$gsimports

gsappend :: GSValue
gsappend = [gs:value| λ 'xn. λ 'ys. analyze xn.
    case 'x:'xn1. x : (xn1 <> ys)
    case nil. ys
|]

gsconcat = [gs:value| foldr (<>) nil |]

gsfoldl = [gs:value| λ 'f. λ 'z. λ 'xn. analyze xn.
    case nil. z
    case 'x:'xn1. foldl f (f z x) xn1
|]

gsfoldr = [gs:value| λ 'f. λ 'z. λ 'xn. analyze xn.
    case nil. z
    case 'x:'xn1. f x (foldr f z xn1)
|]

gsmap = [gs:value| λ 'f. λ 'xn. analyze xn.
    case 'x:'xn1. f x : map f xn1
    case nil. nil
|]

gsfilter = [gs:value| λ 'p. λ 'xn. analyze xn.
    case 'x:'xn1. (analyze p x.
        case true. x : filter p xn1
        case false. filter p xn1
    )
    case nil. nil
|]

gsrepeat = [gs:value| λ 'x. x : repeat x |]

gsreplicate = [gs:value| λ 'n. λ 'x. analyze natural.≡ n 0.
    case true. nil
|]

gszip = [gs:value| λ 'xn. λ 'ys. analyze xn.
    case 'x:'xn1. (analyze ys.
        case 'y:'ys1. 〈 '0 ∝ x; '1 ∝ y; 〉 : zip xn1 ys1
    )
    case _. nil
|]

gsmap2 = [gs:value| λ 'f. λ 'xn. λ 'ys. analyze xn.
    case 'x:'xn1. (analyze ys.
        case 'y:'ys1. f x y : map2 f xn1 ys1
    )
    case _. nil
|]

gsmap3 = [gs:value| λ 'f. λ 'xn. λ 'ys. λ 'zs. analyze xn.
    case 'x:'xn1. (analyze ys.
        case 'y:'ys1. (analyze zs.
            case 'z:'zs1. f x y z : map3 f xn1 ys1 zs1
        )
    )
    case nil. nil
|]

gsdrop = [gs:value| λ 'n. λ 'xn. analyze n -? 1.
    case nothing. xn
    case just 'n1. (analyze xn.
        case nil. nil
        case _ : 'xn1. drop n1 xn1
    )
|]

gslist_eq = [gs:value| λ 'eq. λ 'xn. λ 'ys. analyze xn.
    case 'x:'xn1. (analyze ys.
        case 'y:'ys1. eq x y && list.≡ eq xn1 ys1
    )
    case nil. (analyze ys.
        case _:_. false
        case nil. true
    )
|]

gslist_not_member = [gs:value| λ 'eq. λ 'x. λ 'xn. not (list.∈ eq x xn) |]

gslist_member = [gs:value| λ 'eq. λ 'x. λ 'xn. analyze xn.
    case 'x1:'xn1. eq x x1 || list.∈ eq x xn1
    case nil. false
|]

gscons :: GSValue
gscons = $gslambda_value $ \ x -> $gsbcarg $ \ xn -> $gsbcconstr (gsvar ":") [ $gsav x, $gsav xn ]

gsnil :: GSValue
gsnil = GSConstr $gshere (gsvar "nil") []

gscons_view = $gsbcconstr_view ":"
gsnil_view = $gsbcconstr_view "nil"
