{-# LANGUAGE TemplateHaskell #-}
module GSI.Either (gseither_for, gseither_monad, gseither_bind, gseither_map, gseither_map2, gseither_mapM, gsleft, gsright, gsleft_view, gsright_view) where

-- §hs{gsvar} is imported by gsimports
import GSI.Value (GSValue, gslambda_value, gsav)
import GSI.ByteCode (gsbcconstr, gsbcconstr_view)
$gsimports

gseither_for = [gs:value| λ 'gen. λ 'k. either.>>= gen k |]

gseither_monad = [gs:value| 〈 ('>>=) ∝ either.>>=; 'unit ∝ right; 〉 |]

gseither_bind = [gs:value| λ 'e. λ 'k. analyze e.
    case left 'e. left e
    case right 'x. k x
|]

gseither_map = [gs:value| λ 'f. λ 'e. analyze e.
    case left 'e. left e
    case right 'x. right (f x)
|]

gseither_map2 = [gs:value| λ 'f. λ 'ex. λ 'ey. analyze ex.
|]

gseither_mapM = [gs:value| λ 'f. λ 'xn. analyze xn.
    case nil. right nil
    case 'x:'xn1. either.for
            'y ← f x;
            'ys1 ← either.mapM f xn1;
        . right (y:ys1)
|]

gsleft :: GSValue
gsleft = $gslambda_value $ \ x -> $gsbcconstr (gsvar "left") [ $gsav x ]

gsright :: GSValue
gsright = $gslambda_value $ \ x -> $gsbcconstr (gsvar "right") [ $gsav x ]

gsleft_view = $gsbcconstr_view "left"
gsright_view = $gsbcconstr_view "right"
