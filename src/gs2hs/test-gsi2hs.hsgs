import GSI.Env (runGSProgram)
$gsimports

$gsdeclare process-arg gsprocess_arg

main = runGSProgram $ [gs:value| λ 'as. impmapM process-arg as |]

$gsdeclare need-to-recompile gsneed_to_recompile
$gsdeclare compile-gs-source gscompile_gs_source
$gsdeclare mk-hs-file gsmk_hs_file

gsprocess_arg = [gs:value| λ 'a. impanalyzeM file.stat a.
    case left (ENOENT _). impfor _ ← print-error qq{§(a): Could not load: no such file or directory\n};. abend qq{enoent}
    case right 'st. (analyze st #is.dir.
        case true. impfor 'as ← dir.read a;. impmapM (λ 'a1. process-arg (a <> r{/} : a1)) as
        case false. (analyze file.name.extension.get a.
            case qq{gs}. (impanalyzeM need-to-recompile a.
                case false. impunit 〈〉
                case true. load-document a
                    (λ 'pos. λ 'ty. type-checker.unit 〈〉)
                    (λ 'pos. λ 'd. analyze hsgs.compile-document pos hsgs.compiler.global-env d.
                        case left 'err. impfor _ ← print-error qq{§(err)\n};. abend qq{compile-error}
                        case right 'out. file.write (mk-hs-file a) $ hsmodule.fmt $ hsmain-module (
                            hsoutput.function qq{main} (hsoutput.applyivar qq{TestGSI.RunTime} qq{runTestGSIProgram} (out : nil)) :
                            nil
                        )
                    )
            )
        )
    )
|]

gsneed_to_recompile = [gs:value| λ 'a. impanalyzeM file.stat a.
    case right 'st.gs. (impanalyzeM file.stat (mk-hs-file a).
        case left (ENOENT _). impunit true
        case right 'st.hs. impunit (rational.> (st.gs #mod.time) (st.hs #mod.time))
    )
|]

gsmk_hs_file = [gs:value| file.name.extension.set qq{hs} |]

gscompile_gs_source = [gs:value| λ 'fn. λ 's. undefined |]
