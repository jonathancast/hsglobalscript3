{-# LANGUAGE TemplateHaskell #-}

import GSI.Env (runGSProgram)
$gsimports

$gsdeclare process-arg gsprocess_arg

main = runGSProgram $ [gs:value| λ 'as. impmapM process-arg as |]

$gsdeclare need-to-recompile gsneed_to_recompile
$gsdeclare compile-hsgs-source gscompile_hsgs_source
$gsdeclare mk-hs-file gsmk_hs_file

gsprocess_arg = [gs:value| λ 'a. impanalyzeM file.stat a.
    case left (ENOENT _). impfor _ ← print-error qq{§(a): Could not load: no such file or directory\n};. abend qq{enoent}
    case right 'st. (analyze st #is.dir.
        case true. impfor 'as ← dir.read a;. impmapM (λ 'a1. process-arg (a <> r{/} : a1)) as
        case false. (analyze file.name.extension.get a.
            case qq{hsgs}. (impanalyzeM need-to-recompile a.
                case false. impunit 〈〉
                case true. (impfor 's ← file.read a;. analyze compile-hsgs-source a s.
                    case right 's1. file.write (mk-hs-file a) s1
                    case left 'err. impfor _ ← print-error qq{§(err)\n};. abend qq{compile-error}
                )
            )
        )
    )
|]

gsneed_to_recompile = [gs:value| λ 'a. impanalyzeM file.stat a.
    case right 'st.gs. (impanalyzeM file.stat (mk-hs-file a).
        case left (ENOENT _). impunit true
        case right 'st.hs. impunit (rational.> (st.gs #mod.time) (st.hs #mod.time))
    )
|]

gsmk_hs_file = [gs:value| file.name.extension.set qq{hs} |]

$gsdeclare split-input gssplit_input
$gsdeclare compile-source gscompile_source
$gsdeclare format-output gsformat_output
$gsdeclare hsstring hsstring

gscompile_hsgs_source = [gs:value| λ 'fn. λ 's. either.for
        'i ← split-input (pos.init fn) s;
        'c ← compile-source i hscompiler.hsgs.global-env;
    . right qq{{-# LINE 1 §(hsstring fn) #-}\n§(format-output c)}
|]

gssplit_input = [gs:value| λ 'pos. λ 's. analyze s.
    case r{$}:'s1. (analyze parse-partial advance-rune print-rune (interpolation hsgs.parser.global-env) (advance-rune r{$} pos) s1.
        case left _. either.map ((:) (source-comp.char r{$})) (split-input (advance-rune r{$} pos) s1)
        case right 'r. either.map ((:) (r #0) ∘ (:) (source-comp.pos (r #1))) (split-input (r #1) (r #2))
    )
    case qq{\[gs:§('s1)}. either.for 'r ← parse-partial advance-rune print-rune (quote hsgs.parser.global-env pos <* string qq{|\]}) (advance-string qq{\[gs:} pos) s1;.
        either.map ((:) (r #0) ∘ (:) (source-comp.pos (r #1))) (split-input (r #1) (r #2))
    case 'c:'s1. either.map ((:) (source-comp.char c)) (split-input (advance-rune c pos) s1)
    case nil. right nil
|]

$gsdeclare process-params gsprocess_params

gscompile_source = [gs:value| λ 'i. λ 'env. analyze i.
    case source-comp.char 'c : 'i1. either.map ((:) (dest-comp.char c)) (compile-source i1 env)
    case source-comp.imports : 'i1. either.map ((:) dest-comp.imports) (compile-source i1 env)
    case source-comp.declare 'gsv 'hsv : 'i1. compile-source i1 (hscompiler.env.var.insert gsv 〈 '0 ∝ ordered-set.empty; '1 ∝ hsexpr.var hsv; 〉 env)
    case source-comp.pos 'pos : 'i1. either.map ((:) (dest-comp.pos pos)) (compile-source i1 env)
    case source-comp.value 'pos0 'ps 'pos1 'e : 'i1. either.for
            'ea ← right $ annotate-expr annotator.global-env e;
            'ei ← right $ add-implicits-expr implicits.global-env ea;
            'p ← hscompile-value pos0 (process-params ps env) pos1 ei;
            'o1 ← compile-source i1 env;.
        right (dest-comp.expr (p #0) (p #1) : o1)
    case source-comp.expr 'ps 'pos 'e : 'i1. either.for
            'ea ← right $ annotate-expr annotator.global-env e;
            'ei ← right $ add-implicits-expr implicits.global-env ea;
            'p ← hscompile-expr (process-params ps env) hscompiler.supply.env.empty pos ei;
            'o1 ← compile-source i1 env;.
        right (dest-comp.expr (p #0) (p #1) : o1)
    case nil. right nil
|]

gsprocess_params = [gs:value| λ 'ps. λ 'env. foldr
    (λ 'p. λ 'env. analyze p.
        case quote-param.hsvs 'vs.
            foldr (λ 'v. λ 'env₁. hscompiler.env.var.insert v 〈 '0 ∝ ordered-set.empty; '1 ∝ hsexpr.var (gsvar.name v); 〉 env₁) env vs
    )
    env
    ps
|]

$gsdeclare gather-imports gsgather_imports

gsformat_output = [gs:value| λ 'o. analyze o.
    case dest-comp.char 'c : 'o1. c : format-output o1
    case dest-comp.pos 'pos : 'o1. qq{\n{-# LINE §(fmt-decimal (pos #line)) §(hsstring (pos #filename)) #-}\n§(replicate (pos #col - 1) r{ })§(format-output o1)}
    case dest-comp.imports : 'o1. foldr hsimport.fmt (format-output o1) (ordered-set.to-list (gather-imports o1))
    case dest-comp.expr _ 'e : 'o1. hsexpr.fmt-atom e (format-output o1)
    case nil. nil
|]

gsgather_imports = [gs:value|
    foldl (ordered-set.∪ hsimport.<=>) ordered-set.empty ∘ map (λ 'o. analyze o.
        case dest-comp.char _. ordered-set.empty
        case dest-comp.pos _. ordered-set.empty
        case dest-comp.expr 'is _. is
    )
|]

hsstring = [gs:value| λ 's. qq{"§(s)"} |]
