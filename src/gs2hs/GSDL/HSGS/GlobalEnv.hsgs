module GSDL.HSGS.GlobalEnv (gshsgs_compiler_global_env) where

$gsimports

$gsdeclare hsgs.compiler.env.var.simple-insert gshsgs_compiler_env_var_simple_insert
$gsdeclare hsgs.compiler.env.view.simple-insert gshsgs_compiler_env_view_simple_insert

gshsgs_compiler_global_env = [gs:value|
    hsgs.compiler.env.constr.insert (gsvar qq{error}) $
    hsgs.compiler.env.constr.insert (gsvar qq{undefined}) $
    hsgs.compiler.env.constr.insert (gsvar qq{λ}) $
    hsgs.compiler.env.generator.modify (hsgs.compiler.env.var.simple-insert (gsvar qq{←}) qq{GSI.StdLib} qq{gsfrom}) $
    hsgs.compiler.env.generator.modify (hsgs.compiler.env.var.simple-insert (gsvar qq{∝}) qq{GSI.StdLib} qq{gsmatch}) $
    hsgs.compiler.env.unary.modify (hsgs.compiler.env.var.simple-insert (gsvar qq{+}) qq{GSI.Natural} qq{gsnatural_unary_plus}) $
    hsgs.compiler.env.var.simple-insert (gsvar qq{+}) qq{GSI.Addition} qq{gsaddition_plus} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{:}) qq{GSI.List} qq{gscons} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{>>=}) qq{GSI.Monad} qq{gsmonad_bind} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{analyzeM}) qq{GSI.StdLib} qq{gsanalyzeM} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{analyze}) qq{GSI.StdLib} qq{gsanalyze} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{case}) qq{GSI.StdLib} qq{gscase} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{either.for}) qq{GSI.Either} qq{gseither_for} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{file.name.extension.get}) qq{GS.FileName} qq{gsfile_name_extension_get} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{file.name.in}) qq{GS.FileName} qq{gsfile_name_in} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{for}) qq{GSI.StdLib} qq{gsfor} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{gsio.dir.read}) qq{GSI.Env} qq{gsdir_read} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{gsio.file.stat}) qq{GSI.Env} qq{gsfile_stat} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{gsio.monad}) qq{GSI.GSIO} qq{gsio_monad} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{just}) qq{GSI.Maybe} qq{gsjust} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{mapM0}) qq{GSI.Monad} qq{gsmonad_mapM0} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{map}) qq{GSI.List} qq{gsmap} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{natural.addition}) qq{GSI.Natural} qq{gsnatural_addition} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{nil}) qq{GSI.List} qq{gsnil} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{not}) qq{GSI.Bool} qq{gsnot} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{true}) qq{GSI.Bool} qq{gstrue} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{undefined}) qq{GSI.StdLib} qq{gsundefined} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{value}) qq{GSI.StdLib} qq{gsvalue} $
    hsgs.compiler.env.var.simple-insert (gsvar qq{λ}) qq{GSI.StdLib} qq{gslambda} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{:}) qq{GSI.List} qq{gscons_view} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{false}) qq{GSI.Bool} qq{gsfalse_view} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{just}) qq{GSI.Maybe} qq{gsjust_view} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{nil}) qq{GSI.List} qq{gsnil_view} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{nothing}) qq{GSI.Maybe} qq{gsnothing_view} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{right}) qq{GSI.Either} qq{gsright_view} $
    hsgs.compiler.env.view.simple-insert (gsvar qq{true}) qq{GSI.Bool} qq{gstrue_view} $
    hsgs.compiler.env.arg-var.insert (gsvar qq{#}) (λ 'env. λ 'pos. λ 'f. λ 'as. analyze as.
        case arg.var-name 'v : nil. either.for 'p ← hsgs.compile-arg nothing env (arg.expr pos f);. right $
            hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcfield_w} pos (p : hsoutput.gsvar v : nil)
    ) $
    hsgs.compiler.env.empty
|]

gshsgs_compiler_env_var_simple_insert = [gs:value| λ 'v. λ 'm. λ 'hsv. hsgs.compiler.env.var.insert v (hsoutput.ivar m hsv) |]
gshsgs_compiler_env_view_simple_insert = [gs:value| λ 'v. λ 'm. λ 'hsv. hsgs.compiler.env.view.insert v (hsoutput.ivar m hsv) |]
