module GSDL.HSGlobalEnv (gshsgs_parser_global_env, gshsgs_annotator_global_env, gshscompiler_global_env, gshscompiler_hsgs_global_env) where

$gsimports

gshsgs_parser_global_env = [gs:value|
    parser.env.assoc.insert (gsvar qq{:}) assoc.right $
    parser.env.else-needs-comma.set false $
    parser.env.signature.insert (gsvar qq{impfor}) (order-of-being.generator : order-of-being.open-expr : nil) $
    parser.env.syntactic-category.insert (gsvar qq{impfor}) syntactic-category.lambda-like $
    parser.global-env
|]

gshsgs_annotator_global_env = [gs:value|
    annotator.env.category.insert (gsvar qq{impfor}) (λ 'as. analyze as.
        case (arg.expr _ (expr.generators 'p0 _)):_. just category.monadic : nil
    ) $
    annotator.global-env
|]

$gsdeclare hscompiler.env.supply.monad.simple-insert gshscompiler_env_supply_monad_simple_insert
$gsdeclare hscompiler.env.var.simple-insert gshscompiler_env_var_simple_insert
$gsdeclare hscompiler.env.view.simple-insert gshscompiler_env_view_simple_insert
$gsdeclare hscompile-qchar gshscompile_qchar

gshscompiler_global_env = [gs:value|
    hscompiler.env.constr.insert (gsvar qq{error}) $
    hscompiler.env.constr.insert (gsvar qq{undefined}) $
    hscompiler.env.constr.insert (gsvar qq{λ}) $
    hscompiler.env.constrarity.insert (gsvar qq{λ}) 2 $
    hscompiler.env.generator.modify (hscompiler.env.var.simple-insert (gsvar qq{←}) qq{GSI.StdLib} qq{gsfrom}) $
    hscompiler.env.generator.modify (hscompiler.env.var.simple-insert (gsvar qq{∝}) qq{GSI.StdLib} qq{gsmatch}) $
    hscompiler.env.supply.monad.simple-insert (gsvar qq{either.for}) qq{GSI.Either} qq{gseither_monad} $
    hscompiler.env.supply.monad.simple-insert (gsvar qq{impfor}) qq{GSI.StdLib} qq{gsimpmonad} $
    hscompiler.env.var.simple-insert (gsvar qq{$}) qq{GSI.StdLib} qq{gsapply_fn} $
    hscompiler.env.var.simple-insert (gsvar qq{&&}) qq{GSI.Bool} qq{gsshort_circuit_and} $
    hscompiler.env.var.simple-insert (gsvar qq{*>}) qq{GSI.Parser} qq{gsparser_then} $
    hscompiler.env.var.simple-insert (gsvar qq{+}) qq{GSI.Addition} qq{gsaddition_plus} $
    hscompiler.env.var.simple-insert (gsvar qq{<*>}) qq{GSI.Parser} qq{gsparser_app} $
    hscompiler.env.var.simple-insert (gsvar qq{<*}) qq{GSI.Parser} qq{gsparser_after} $
    hscompiler.env.var.simple-insert (gsvar qq{<>}) qq{GSI.List} qq{gsappend} $
    hscompiler.env.var.simple-insert (gsvar qq{<|>}) qq{GSI.Parser} qq{gsparser_or} $
    hscompiler.env.var.simple-insert (gsvar qq{>>=}) qq{GSI.Monad} qq{gsmonad_bind} $
    hscompiler.env.var.simple-insert (gsvar qq{abend}) qq{GSI.Env} qq{gsabend} $
    hscompiler.env.var.simple-insert (gsvar qq{add-implicits-document}) qq{GSDL.Implicit} qq{gsadd_implicits_document} $
    hscompiler.env.var.simple-insert (gsvar qq{add-implicits-expr}) qq{GSDL.Implicit} qq{gsadd_implicits_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{add-implicits-pat-qloitem}) qq{GSDL.Implicit} qq{gsadd_implicits_pat_qloitem} $
    hscompiler.env.var.simple-insert (gsvar qq{add-implicits-pat}) qq{GSDL.Implicit} qq{gsadd_implicits_pat} $
    hscompiler.env.var.simple-insert (gsvar qq{addition.+}) qq{GSI.Addition} qq{gsaddition_plus} $
    hscompiler.env.var.simple-insert (gsvar qq{advance-rune}) qq{GSI.Parser} qq{gsparser_advance_rune} $
    hscompiler.env.var.simple-insert (gsvar qq{advance-string}) qq{GSI.Parser} qq{gsparser_advance_string} $
    hscompiler.env.var.simple-insert (gsvar qq{analyzeM}) qq{GSI.StdLib} qq{gsanalyzeM} $
    hscompiler.env.var.simple-insert (gsvar qq{analyze}) qq{GSI.StdLib} qq{gsanalyze} $
    hscompiler.env.var.simple-insert (gsvar qq{annotate-document}) qq{GSDL.Annotate} qq{gsannotate_document} $
    hscompiler.env.var.simple-insert (gsvar qq{annotate-expr}) qq{GSDL.Annotate} qq{gsannotate_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{annotate-pat-qloitem}) qq{GSDL.Annotate} qq{gsannotate_pat_qloitem} $
    hscompiler.env.var.simple-insert (gsvar qq{annotate-qloitem}) qq{GSDL.Annotate} qq{gsannotate_qloitem} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.category.get}) qq{GSDL.Annotator} qq{gsannotator_env_category_get} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.category.insert}) qq{GSDL.Annotator} qq{gsannotator_env_category_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.empty}) qq{GSDL.Annotator} qq{gsannotator_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.pattern.get}) qq{GSDL.Annotator} qq{gsannotator_env_pattern_get} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.pattern.modify}) qq{GSDL.Annotator} qq{gsannotator_env_pattern_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.qlo.get}) qq{GSDL.Annotator} qq{gsannotator_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.env.qlo.insert}) qq{GSDL.Annotator} qq{gsannotator_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{annotator.global-env}) qq{GSDL.GlobalEnv} qq{gsannotator_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{arg.app}) qq{GSDL.AST} qq{gsarg_app} $
    hscompiler.env.var.simple-insert (gsvar qq{arg.explicit}) qq{GSDL.AST} qq{gsarg_explicit} $
    hscompiler.env.var.simple-insert (gsvar qq{arg.expr}) qq{GSDL.AST} qq{gsarg_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{arg.var-name}) qq{GSDL.AST} qq{gsarg_var_name} $
    hscompiler.env.var.simple-insert (gsvar qq{arg.var}) qq{GSDL.AST} qq{gsarg_var} $
    hscompiler.env.var.simple-insert (gsvar qq{assoc.left}) qq{GSDL.AST} qq{gsassoc_left} $
    hscompiler.env.var.simple-insert (gsvar qq{assoc.non-assoc}) qq{GSDL.AST} qq{gsassoc_non_assoc} $
    hscompiler.env.var.simple-insert (gsvar qq{assoc.right}) qq{GSDL.AST} qq{gsassoc_right} $
    hscompiler.env.var.simple-insert (gsvar qq{case}) qq{GSI.StdLib} qq{gscase} $
    hscompiler.env.var.simple-insert (gsvar qq{category.fallible}) qq{GSDL.AST} qq{gscategory_fallible} $
    hscompiler.env.var.simple-insert (gsvar qq{category.monadic}) qq{GSDL.AST} qq{gscategory_monadic} $
    hscompiler.env.var.simple-insert (gsvar qq{char}) qq{GSI.Parser} qq{gsparser_char} $
    hscompiler.env.var.simple-insert (gsvar qq{compile-document}) qq{GSDL.Compile} qq{gscompile_document} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.constr.get}) qq{GSDL.Compiler} qq{gscompiler_env_constr_get} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.constr.insert}) qq{GSDL.Compiler} qq{gscompiler_env_constr_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.empty}) qq{GSDL.Compiler} qq{gscompiler_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.qlo.get}) qq{GSDL.Compiler} qq{gscompiler_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.qlo.insert}) qq{GSDL.Compiler} qq{gscompiler_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.value.get}) qq{GSDL.Compiler} qq{gscompiler_env_value_get} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.value.insert}) qq{GSDL.Compiler} qq{gscompiler_env_value_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.view.get}) qq{GSDL.Compiler} qq{gscompiler_env_view_get} $
    hscompiler.env.var.simple-insert (gsvar qq{compiler.env.view.insert}) qq{GSDL.Compiler} qq{gscompiler_env_view_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{compose}) qq{GSI.List} qq{gsbigcompose} $
    hscompiler.env.var.simple-insert (gsvar qq{concat}) qq{GSI.List} qq{gsconcat} $
    hscompiler.env.var.simple-insert (gsvar qq{const}) qq{GSI.StdLib} qq{gsconst} $
    hscompiler.env.var.simple-insert (gsvar qq{consume.monad}) qq{GSDL.AST} qq{gsconsume_monad} $
    hscompiler.env.var.simple-insert (gsvar qq{create-thread}) qq{GSI.GSI} qq{gsicreateThread} $
    hscompiler.env.var.simple-insert (gsvar qq{dest-comp.char}) qq{GSDL.HSGS.AST} qq{gsdest_comp_char} $
    hscompiler.env.var.simple-insert (gsvar qq{dest-comp.expr}) qq{GSDL.HSGS.AST} qq{gsdest_comp_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{dest-comp.imports}) qq{GSDL.HSGS.AST} qq{gsdest_comp_imports} $
    hscompiler.env.var.simple-insert (gsvar qq{dest-comp.pos}) qq{GSDL.HSGS.AST} qq{gsdest_comp_pos} $
    hscompiler.env.var.simple-insert (gsvar qq{dir.read}) qq{GSI.Env} qq{gsdir_read} $
    hscompiler.env.var.simple-insert (gsvar qq{document.in}) qq{GSDL.AST} qq{gsdocument_in} $
    hscompiler.env.var.simple-insert (gsvar qq{document}) qq{GSDL.Syntax} qq{document} $
    hscompiler.env.var.simple-insert (gsvar qq{drop}) qq{GSI.List} qq{gsdrop} $
    hscompiler.env.var.simple-insert (gsvar qq{either.>>=}) qq{GSI.Either} qq{gseither_bind} $
    hscompiler.env.var.simple-insert (gsvar qq{either.for}) qq{GSI.Either} qq{gseither_for} $
    hscompiler.env.var.simple-insert (gsvar qq{either.map2}) qq{GSI.Either} qq{gseither_map2} $
    hscompiler.env.var.simple-insert (gsvar qq{either.mapM}) qq{GSI.Either} qq{gseither_mapM} $
    hscompiler.env.var.simple-insert (gsvar qq{either.map}) qq{GSI.Either} qq{gseither_map} $
    hscompiler.env.var.simple-insert (gsvar qq{empty}) qq{GSI.Parser} qq{gsempty} $
    hscompiler.env.var.simple-insert (gsvar qq{env.var.get}) qq{GSI.Env} qq{gsenv_var_get} $
    hscompiler.env.var.simple-insert (gsvar qq{eq}) qq{GSI.OrderTotal} qq{gsord_eq} $
    hscompiler.env.var.simple-insert (gsvar qq{error}) qq{GSI.StdLib} qq{gserror} $
    hscompiler.env.var.simple-insert (gsvar qq{eval-sync}) qq{GSI.GSI} qq{gsieval_sync} $
    hscompiler.env.var.simple-insert (gsvar qq{exec-main-thread}) qq{GSI.GSI} qq{gsiexecMainThread} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.app}) qq{GSDL.AST} qq{gsexpr_app} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.atom}) qq{GSDL.Syntax} qq{gsexpr_atom} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.fallible-pat}) qq{GSDL.AST} qq{gsexpr_fallible_pat} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.generators}) qq{GSDL.AST} qq{gsexpr_generators} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.missing-case}) qq{GSDL.AST} qq{gsexpr_missing_case} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.monadic-generators}) qq{GSDL.AST} qq{gsexpr_monadic_generators} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.monad}) qq{GSDL.AST} qq{gsexpr_monad} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.natural}) qq{GSDL.AST} qq{gsexpr_natural} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.open-expr}) qq{GSDL.AST} qq{gsexpr_open_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.pat}) qq{GSDL.AST} qq{gsexpr_pat} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.qlo}) qq{GSDL.AST} qq{gsexpr_qlo} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.structure-literal}) qq{GSDL.AST} qq{gsexpr_structure_literal} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.unary}) qq{GSDL.AST} qq{gsexpr_unary} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.value-var}) qq{GSDL.AST} qq{gsexpr_value_var} $
    hscompiler.env.var.simple-insert (gsvar qq{expr.var}) qq{GSDL.AST} qq{gsexpr_var} $
    hscompiler.env.var.simple-insert (gsvar qq{expr}) qq{GSDL.Syntax} qq{expr} $
    hscompiler.env.var.simple-insert (gsvar qq{false}) qq{GSI.Bool} qq{gsfalse} $
    hscompiler.env.var.simple-insert (gsvar qq{file.document}) qq{GSDL.AST} qq{gsfile_document} $
    hscompiler.env.var.simple-insert (gsvar qq{file.name.extension.get}) qq{GS.FileName} qq{gsfile_name_extension_get} $
    hscompiler.env.var.simple-insert (gsvar qq{file.name.extension.set}) qq{GS.FileName} qq{gsfile_name_extension_set} $
    hscompiler.env.var.simple-insert (gsvar qq{file.name.extensions.get}) qq{GS.FileName} qq{gsfile_name_extensions_get} $
    hscompiler.env.var.simple-insert (gsvar qq{file.name.extensions.set}) qq{GS.FileName} qq{gsfile_name_extensions_set} $
    hscompiler.env.var.simple-insert (gsvar qq{file.name.in}) qq{GS.FileName} qq{gsfile_name_in} $
    hscompiler.env.var.simple-insert (gsvar qq{file.name.path-components.modify}) qq{GS.FileName} qq{gsfile_name_path_components_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{file.read}) qq{GSI.Env} qq{gsfile_read} $
    hscompiler.env.var.simple-insert (gsvar qq{file.stat}) qq{GSI.Env} qq{gsfile_stat} $
    hscompiler.env.var.simple-insert (gsvar qq{file.write}) qq{GSI.Env} qq{gsfile_write} $
    hscompiler.env.var.simple-insert (gsvar qq{file}) qq{GSDL.Syntax} qq{file} $
    hscompiler.env.var.simple-insert (gsvar qq{filter}) qq{GSI.List} qq{gsfilter} $
    hscompiler.env.var.simple-insert (gsvar qq{fmt-decimal}) qq{GSI.String} qq{gsfmt_decimal} $
    hscompiler.env.var.simple-insert (gsvar qq{foldl}) qq{GSI.List} qq{gsfoldl} $
    hscompiler.env.var.simple-insert (gsvar qq{foldr}) qq{GSI.List} qq{gsfoldr} $
    hscompiler.env.var.simple-insert (gsvar qq{followed-by}) qq{GSI.Parser} qq{gsparser_followed_by} $
    hscompiler.env.var.simple-insert (gsvar qq{for}) qq{GSI.StdLib} qq{gsfor} $
    hscompiler.env.var.simple-insert (gsvar qq{generator.app}) qq{GSDL.AST} qq{gsgenerator_app} $
    hscompiler.env.var.simple-insert (gsvar qq{generator.expr}) qq{GSDL.AST} qq{gsgenerator_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{generator.pattern}) qq{GSDL.AST} qq{gsgenerator_pattern} $
    hscompiler.env.var.simple-insert (gsvar qq{generator.var}) qq{GSDL.AST} qq{gsgenerator_var} $
    hscompiler.env.var.simple-insert (gsvar qq{get-pos}) qq{GSI.Parser} qq{gsparser_get_pos} $
    hscompiler.env.var.simple-insert (gsvar qq{gsae}) qq{GSI.GSI} qq{gsigsae} $
    hscompiler.env.var.simple-insert (gsvar qq{gsapply}) qq{GSI.GSI} qq{gsigsapply} $
    hscompiler.env.var.simple-insert (gsvar qq{gsav}) qq{GSI.GSI} qq{gsigsav} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcapply}) qq{GSI.GSI} qq{gsigsbcapply} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcarg}) qq{GSI.GSI} qq{gsigsbcarg} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcdiscardpattern}) qq{GSI.GSI} qq{gsigsbcdiscardpattern} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcenter}) qq{GSI.GSI} qq{gsigsbcenter} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcinsufficientcases}) qq{GSI.GSI} qq{gsigsbcinsufficientcases} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbclfield}) qq{GSI.GSI} qq{gsigsbclfield} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcnatural}) qq{GSI.GSI} qq{gsigsbcnatural} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcrehere}) qq{GSI.GSI} qq{gsigsbcrehere} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcundefined}) qq{GSI.GSI} qq{gsigsbcundefined} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcvarpattern}) qq{GSI.GSI} qq{gsigsbcvarpattern} $
    hscompiler.env.var.simple-insert (gsvar qq{gsbcviewpattern}) qq{GSI.GSI} qq{gsigsbcviewpattern} $
    hscompiler.env.var.simple-insert (gsvar qq{gsfmt-error}) qq{GSI.GSI} qq{gsigsfmtError} $
    hscompiler.env.var.simple-insert (gsvar qq{gsi.monad}) qq{GSI.GSI} qq{gsi_monad} $
    hscompiler.env.var.simple-insert (gsvar qq{gsiae}) qq{GSI.GSI} qq{gsigsiae} $
    hscompiler.env.var.simple-insert (gsvar qq{gsiagv}) qq{GSI.GSI} qq{gsigsiagv} $
    hscompiler.env.var.simple-insert (gsvar qq{gsinfalliblepattern}) qq{GSI.StdLib} qq{gsinfalliblepattern} $
    hscompiler.env.var.simple-insert (gsvar qq{gsinject}) qq{GSI.GSI} qq{gsigsinject} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcdiscardpattern}) qq{GSI.GSI} qq{gsigsintbcdiscardpattern} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbceapply}) qq{GSI.GSI} qq{gsigsintbceapply} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcfenter}) qq{GSI.GSI} qq{gsigsintbcfenter} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcgapply}) qq{GSI.GSI} qq{gsigsintbcgapply} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcgenter}) qq{GSI.GSI} qq{gsigsintbcgenter} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcinsufficientcases}) qq{GSI.GSI} qq{gsigsintbcinsufficientcases} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcnatural}) qq{GSI.GSI} qq{gsigsintbcnatural} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcopenexpr}) qq{GSI.GSI} qq{gsigsintbcopenexpr} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcundefined}) qq{GSI.GSI} qq{gsigsintbcundefined} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcvarpattern}) qq{GSI.GSI} qq{gsigsintbcvarpattern} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintbcwithhere}) qq{GSI.GSI} qq{gsigsintbcwithhere} $
    hscompiler.env.var.simple-insert (gsvar qq{gsintthunk}) qq{GSI.GSI} qq{gsigsintthunk} $
    hscompiler.env.var.simple-insert (gsvar qq{gsio.dir.read}) qq{GSI.Env} qq{gsdir_read} $
    hscompiler.env.var.simple-insert (gsvar qq{gsio.file.stat}) qq{GSI.Env} qq{gsfile_stat} $
    hscompiler.env.var.simple-insert (gsvar qq{gsio.monad}) qq{GSI.GSIO} qq{gsio_monad} $
    hscompiler.env.var.simple-insert (gsvar qq{gsmain}) qq{GSI.Main} qq{gsmain} $
    hscompiler.env.var.simple-insert (gsvar qq{gsthunk}) qq{GSI.GSI} qq{gsigsthunk} $
    hscompiler.env.var.simple-insert (gsvar qq{gsundefined}) qq{GSI.GSI} qq{gsigsundefined} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvalue.constr}) qq{GSI.GSI} qq{gsvalue_constr} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvar.<=>}) qq{GSI.GSI} qq{gsigsvar_compare} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvar.fmt-atom}) qq{GSI.GSI} qq{gsigsvar_fmtAtom} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvar.fmt-bind-atom}) qq{GSI.GSI} qq{gsigsvar_fmtBindAtom} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvar.name}) qq{GSI.GSI} qq{gsigsvar_name} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvar.≡}) qq{GSI.GSI} qq{gsigsvar_eq} $
    hscompiler.env.var.simple-insert (gsvar qq{gsvar}) qq{GSI.GSI} qq{gsigsvar} $
    hscompiler.env.var.simple-insert (gsvar qq{gsv}) qq{GSI.Log} qq{gsloggsv} $
    hscompiler.env.var.simple-insert (gsvar qq{gt}) qq{GSI.OrderTotal} qq{gsord_gt} $
    hscompiler.env.var.simple-insert (gsvar qq{head.get-strict}) qq{GSI.List} qq{gshead_get_strict} $
    hscompiler.env.var.simple-insert (gsvar qq{head.modify-strict}) qq{GSI.List} qq{gshead_modify_strict} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompile-arg}) qq{GSDL.HSCompile} qq{gshscompile_arg} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompile-document}) qq{GSDL.HSCompile} qq{gshscompile_document} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompile-expr}) qq{GSDL.HSCompile} qq{gshscompile_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompile-fallible-pat}) qq{GSDL.HSCompile} qq{gshscompile_fallible_pat} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompile-pat}) qq{GSDL.HSCompile} qq{gshscompile_pat} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompile-value}) qq{GSDL.HSCompile} qq{gshscompile_value} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.arg-var.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_arg_var_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.arg-var.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_arg_var_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.constr.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_constr_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.constr.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_constr_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.constrarity.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_constrarity_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.constrarity.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_constrarity_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.empty}) qq{GSDL.HSCompiler} qq{gshscompiler_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.gen-sym}) qq{GSDL.HSCompiler} qq{gshscompiler_env_gen_sym} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.generator.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_generator_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.generator.modify}) qq{GSDL.HSCompiler} qq{gshscompiler_env_generator_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.pattern.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_pattern_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.pattern.modify}) qq{GSDL.HSCompiler} qq{gshscompiler_env_pattern_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.qlo.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.qlo.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.supply.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_supply_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.supply.modify}) qq{GSDL.HSCompiler} qq{gshscompiler_env_supply_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.supply.monad.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_supply_monad_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.unary.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_unary_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.unary.modify}) qq{GSDL.HSCompiler} qq{gshscompiler_env_unary_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.var.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_var_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.var.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_var_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.view.get}) qq{GSDL.HSCompiler} qq{gshscompiler_env_view_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.env.view.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_env_view_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.global-env}) qq{GSDL.HSGlobalEnv} qq{gshscompiler_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.hsgs.global-env}) qq{GSDL.HSGlobalEnv} qq{gshscompiler_hsgs_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.supply.env.empty}) qq{GSDL.HSCompiler} qq{gshscompiler_supply_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.supply.env.monad.get}) qq{GSDL.HSCompiler} qq{gshscompiler_supply_env_monad_get} $
    hscompiler.env.var.simple-insert (gsvar qq{hscompiler.supply.env.monad.insert}) qq{GSDL.HSCompiler} qq{gshscompiler_supply_env_monad_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.applyvar}) qq{GSDL.HSGS.AST} qq{gshsexpr_applyvar} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.app}) qq{GSDL.HSGS.AST} qq{gshsexpr_app} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.char}) qq{GSDL.HSGS.AST} qq{gshsexpr_char} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.fmt-atom}) qq{GSDL.HSGS.AST} qq{gshsexpr_fmt_atom} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.fmt}) qq{GSDL.HSGS.AST} qq{gshsexpr_fmt} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.int}) qq{GSDL.HSGS.AST} qq{gshsexpr_int} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.lambda}) qq{GSDL.HSGS.AST} qq{gshsexpr_lambda} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.list}) qq{GSDL.HSGS.AST} qq{gshsexpr_list} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.string}) qq{GSDL.HSGS.AST} qq{gshsexpr_string} $
    hscompiler.env.var.simple-insert (gsvar qq{hsexpr.var}) qq{GSDL.HSGS.AST} qq{gshsexpr_var} $
    hscompiler.env.var.simple-insert (gsvar qq{hsfunction.fmt}) qq{GSDL.HSGS.AST} qq{gshsfunction_fmt} $
    hscompiler.env.var.simple-insert (gsvar qq{hsfunction.in}) qq{GSDL.HSGS.AST} qq{gshsfunction_in} $
    hscompiler.env.var.simple-insert (gsvar qq{hsgs.annotator.global-env}) qq{GSDL.HSGlobalEnv} qq{gshsgs_annotator_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{hsgs.parser.global-env}) qq{GSDL.HSGlobalEnv} qq{gshsgs_parser_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{hsimport.<=>}) qq{GSDL.HSGS.AST} qq{gshsimport_cmp} $
    hscompiler.env.var.simple-insert (gsvar qq{hsimport.fmt}) qq{GSDL.HSGS.AST} qq{gshsimport_fmt} $
    hscompiler.env.var.simple-insert (gsvar qq{hsimport.type}) qq{GSDL.HSGS.AST} qq{gshsimport_type} $
    hscompiler.env.var.simple-insert (gsvar qq{hsimport.var}) qq{GSDL.HSGS.AST} qq{gshsimport_var} $
    hscompiler.env.var.simple-insert (gsvar qq{hsmain-module}) qq{GSDL.HSGS.AST} qq{gshsmain_module} $
    hscompiler.env.var.simple-insert (gsvar qq{hsmodule.fmt}) qq{GSDL.HSGS.AST} qq{gshsmodule_fmt} $
    hscompiler.env.var.simple-insert (gsvar qq{hsmodule.in}) qq{GSDL.HSGS.AST} qq{gshsmodule_in} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.applyiconstr}) qq{GSDL.HSGS.AST} qq{gshsoutput_applyiconstr} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.applyivarpos}) qq{GSDL.HSGS.AST} qq{gshsoutput_applyivarpos} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.applyivar}) qq{GSDL.HSGS.AST} qq{gshsoutput_applyivar} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.apply}) qq{GSDL.HSGS.AST} qq{gshsoutput_apply} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.app}) qq{GSDL.HSGS.AST} qq{gshsoutput_app} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.arg-expr}) qq{GSDL.HSGS.AST} qq{gshsoutput_arg_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.arg-var}) qq{GSDL.HSGS.AST} qq{gshsoutput_arg_var} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.char}) qq{GSDL.HSGS.AST} qq{gshsoutput_char} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.function}) qq{GSDL.HSGS.AST} qq{gshsoutput_function} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.gsvar}) qq{GSDL.HSGS.AST} qq{gshsoutput_gsvar} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.iconstr}) qq{GSDL.HSGS.AST} qq{gshsoutput_iconstr} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.int}) qq{GSDL.HSGS.AST} qq{gshsoutput_int} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.ivar}) qq{GSDL.HSGS.AST} qq{gshsoutput_ivar} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.lambda}) qq{GSDL.HSGS.AST} qq{gshsoutput_lambda} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.list}) qq{GSDL.HSGS.AST} qq{gshsoutput_list} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.pos}) qq{GSDL.HSGS.AST} qq{gshsoutput_pos} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.rehere-value}) qq{GSDL.HSGS.AST} qq{gshsoutput_rehere_value} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.rehere}) qq{GSDL.HSGS.AST} qq{gshsoutput_rehere} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.string}) qq{GSDL.HSGS.AST} qq{gshsoutput_string} $
    hscompiler.env.var.simple-insert (gsvar qq{hsoutput.var}) qq{GSDL.HSGS.AST} qq{gshsoutput_var} $
    hscompiler.env.var.simple-insert (gsvar qq{ident-chars}) qq{GSDL.Syntax} qq{ident_chars} $
    hscompiler.env.var.simple-insert (gsvar qq{ident}) qq{GSDL.Syntax} qq{ident} $
    hscompiler.env.var.simple-insert (gsvar qq{id}) qq{GSI.StdLib} qq{gsid} $
    hscompiler.env.var.simple-insert (gsvar qq{impanalyzeM}) qq{GSI.StdLib} qq{gsimpanalyzeM} $
    hscompiler.env.var.simple-insert (gsvar qq{impbind}) qq{GSI.StdLib} qq{gsimpbind} $
    hscompiler.env.var.simple-insert (gsvar qq{impfor}) qq{GSI.StdLib} qq{gsimpfor} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.consumes.get}) qq{GSDL.Implicits} qq{gsimplicit_env_consumes_get} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.consumes.insert}) qq{GSDL.Implicits} qq{gsimplicit_env_consumes_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.empty}) qq{GSDL.Implicits} qq{gsimplicit_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.generators.get}) qq{GSDL.Implicits} qq{gsimplicit_env_generators_get} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.generators.modify}) qq{GSDL.Implicits} qq{gsimplicit_env_generators_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.pattern.get}) qq{GSDL.Implicits} qq{gsimplicit_env_pattern_get} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.pattern.modify}) qq{GSDL.Implicits} qq{gsimplicit_env_pattern_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.qlo.get}) qq{GSDL.Implicits} qq{gsimplicit_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{implicit.env.qlo.insert}) qq{GSDL.Implicits} qq{gsimplicit_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{implicits.global-env}) qq{GSDL.GlobalEnv} qq{gsimplicits_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{impmapM}) qq{GS.Util} qq{gsimpmapM} $
    hscompiler.env.var.simple-insert (gsvar qq{impunit}) qq{GSI.StdLib} qq{gsimpunit} $
    hscompiler.env.var.simple-insert (gsvar qq{instantiate}) qq{GSDL.TypeChecker} qq{gstype_checker_instantiate} $
    hscompiler.env.var.simple-insert (gsvar qq{interpolation}) qq{GSDL.HSGS.Syntax} qq{interpolation} $
    hscompiler.env.var.simple-insert (gsvar qq{is-ascii-digit}) qq{GSI.Rune} qq{gsis_ascii_digit} $
    hscompiler.env.var.simple-insert (gsvar qq{is-letter}) qq{GSI.Rune} qq{gsis_letter} $
    hscompiler.env.var.simple-insert (gsvar qq{is-lower}) qq{GSI.Rune} qq{gsis_lower} $
    hscompiler.env.var.simple-insert (gsvar qq{is-non-ascii-symbol}) qq{GSI.Rune} qq{gsis_non_ascii_symbol} $
    hscompiler.env.var.simple-insert (gsvar qq{is-space}) qq{GSI.Rune} qq{gsis_space} $
    hscompiler.env.var.simple-insert (gsvar qq{is-upper}) qq{GSI.Rune} qq{gsis_upper} $
    hscompiler.env.var.simple-insert (gsvar qq{just}) qq{GSI.Maybe} qq{gsjust} $
    hscompiler.env.var.simple-insert (gsvar qq{kind.pointed}) qq{GSDL.AST} qq{gskind_pointed} $
    hscompiler.env.var.simple-insert (gsvar qq{last-strict}) qq{GSI.List} qq{gslast_strict} $
    hscompiler.env.var.simple-insert (gsvar qq{last.modify}) qq{GSI.List} qq{gslast_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{left}) qq{GSI.Either} qq{gsleft} $
    hscompiler.env.var.simple-insert (gsvar qq{lexeme}) qq{GSDL.Syntax} qq{lexeme} $
    hscompiler.env.var.simple-insert (gsvar qq{list.<=>}) qq{GSI.List} qq{gslist_compare} $
    hscompiler.env.var.simple-insert (gsvar qq{list.singleton}) qq{GSI.List} qq{gslist_singleton} $
    hscompiler.env.var.simple-insert (gsvar qq{list.∀}) qq{GSI.List} qq{gslist_forall} $
    hscompiler.env.var.simple-insert (gsvar qq{list.∃}) qq{GSI.List} qq{gslist_exists} $
    hscompiler.env.var.simple-insert (gsvar qq{list.∈}) qq{GSI.List} qq{gslist_member} $
    hscompiler.env.var.simple-insert (gsvar qq{list.∉}) qq{GSI.List} qq{gslist_not_member} $
    hscompiler.env.var.simple-insert (gsvar qq{list.≡}) qq{GSI.List} qq{gslist_eq} $
    hscompiler.env.var.simple-insert (gsvar qq{load-document}) qq{GSI.Main} qq{gsload_document} $
    hscompiler.env.var.simple-insert (gsvar qq{log.<>}) qq{GSI.StdLib} qq{gscompose} $
    hscompiler.env.var.simple-insert (gsvar qq{log.char}) qq{GSI.Log} qq{gslogchar} $
    hscompiler.env.var.simple-insert (gsvar qq{log.dstr}) qq{GSI.Log} qq{gslog_dstr} $
    hscompiler.env.var.simple-insert (gsvar qq{log.fmt}) qq{GSI.Log} qq{gslog_fmt} $
    hscompiler.env.var.simple-insert (gsvar qq{log.nil}) qq{GSI.Log} qq{gslogempty} $
    hscompiler.env.var.simple-insert (gsvar qq{log.str}) qq{GSI.Log} qq{gslog_str} $
    hscompiler.env.var.simple-insert (gsvar qq{lt}) qq{GSI.OrderTotal} qq{gsord_lt} $
    hscompiler.env.var.simple-insert (gsvar qq{many1}) qq{GSI.Parser} qq{gsmany1} $
    hscompiler.env.var.simple-insert (gsvar qq{many}) qq{GSI.Parser} qq{gsmany} $
    hscompiler.env.var.simple-insert (gsvar qq{map2}) qq{GSI.List} qq{gsmap2} $
    hscompiler.env.var.simple-insert (gsvar qq{map3}) qq{GSI.List} qq{gsmap3} $
    hscompiler.env.var.simple-insert (gsvar qq{mapM0}) qq{GSI.Monad} qq{gsmonad_mapM0} $
    hscompiler.env.var.simple-insert (gsvar qq{map}) qq{GSI.List} qq{gsmap} $
    hscompiler.env.var.simple-insert (gsvar qq{maybe.out}) qq{GSI.Maybe} qq{gsmaybe_out} $
    hscompiler.env.var.simple-insert (gsvar qq{monad.>>=}) qq{GSI.Monad} qq{gsmonad_bind} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.<=>}) qq{GSI.Natural} qq{gsnatural_cmp} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.>}) qq{GSI.Natural} qq{gsnatural_gt} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.addition}) qq{GSI.Natural} qq{gsnatural_addition} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.div-mod}) qq{GSI.Natural} qq{gsnatural_div_mod} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.fmt-decimal}) qq{GSI.Format} qq{gsnatural_fmt_decimal} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.read-decimal}) qq{GSI.Format} qq{gsnatural_read_decimal} $
    hscompiler.env.var.simple-insert (gsvar qq{natural.≡}) qq{GSI.Natural} qq{gsnatural_eq} $
    hscompiler.env.var.simple-insert (gsvar qq{nil}) qq{GSI.List} qq{gsnil} $
    hscompiler.env.var.simple-insert (gsvar qq{not-followed-by}) qq{GSI.Parser} qq{gsparser_not_followed_by} $
    hscompiler.env.var.simple-insert (gsvar qq{nothing}) qq{GSI.Maybe} qq{gsnothing} $
    hscompiler.env.var.simple-insert (gsvar qq{not}) qq{GSI.Bool} qq{gsnot} $
    hscompiler.env.var.simple-insert (gsvar qq{op-chars}) qq{GSDL.Syntax} qq{op_chars} $
    hscompiler.env.var.simple-insert (gsvar qq{optional}) qq{GSI.Parser} qq{gsparser_optional} $
    hscompiler.env.var.simple-insert (gsvar qq{ord.<|>}) qq{GSI.OrderTotal} qq{gsord_or} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.<=>}) qq{GSDL.AST} qq{gsorder_of_being_cmp} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.expr}) qq{GSDL.AST} qq{gsorder_of_being_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.generator}) qq{GSDL.AST} qq{gsorder_of_being_generator} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.open-expr}) qq{GSDL.AST} qq{gsorder_of_being_open_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.pattern}) qq{GSDL.AST} qq{gsorder_of_being_pattern} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.to-code}) qq{GSDL.AST} qq{gsorder_of_being_to_code} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.value-var}) qq{GSDL.AST} qq{gsorder_of_being_value_var} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.var-name}) qq{GSDL.AST} qq{gsorder_of_being_var_name} $
    hscompiler.env.var.simple-insert (gsvar qq{order-of-being.≡}) qq{GSDL.AST} qq{gsorder_of_being_eq} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.empty}) qq{GSI.Map} qq{gsordered_map_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.get}) qq{GSI.Map} qq{gsordered_map_get} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.insert}) qq{GSI.Map} qq{gsordered_map_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.keys}) qq{GSI.Map} qq{gsordered_map_keys} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.to-list}) qq{GSI.Map} qq{gsordered_map_to_list} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.values}) qq{GSI.Map} qq{gsordered_map_values} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-map.∪}) qq{GSI.Map} qq{gsordered_map_union} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.empty}) qq{GSI.Set} qq{gsordered_set_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.from-list}) qq{GSI.Set} qq{gsordered_set_from_list} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.inserts}) qq{GSI.Set} qq{gsordered_set_inserts} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.insert}) qq{GSI.Set} qq{gsordered_set_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.singleton}) qq{GSI.Set} qq{gsordered_set_singleton} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.to-list}) qq{GSI.Set} qq{gsordered_set_to_list} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.unions}) qq{GSI.Set} qq{gsordered_set_unions} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.∈}) qq{GSI.Set} qq{gsordered_set_member} $
    hscompiler.env.var.simple-insert (gsvar qq{ordered-set.∪}) qq{GSI.Set} qq{gsordered_set_union} $
    hscompiler.env.var.simple-insert (gsvar qq{parse-partial}) qq{GSI.Parser} qq{gsparse_partial} $
    hscompiler.env.var.simple-insert (gsvar qq{parser-run}) qq{GSI.Parser} qq{gsparser_run} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.>>=}) qq{GSI.Parser} qq{gsparser_bind} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.choice}) qq{GSI.Parser} qq{gsparser_choice} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.assoc.get}) qq{GSDL.Parser} qq{gsdl_parser_env_assoc_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.assoc.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_assoc_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.else-needs-comma.get}) qq{GSDL.Parser} qq{gsdl_parser_env_else_needs_comma_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.else-needs-comma.set}) qq{GSDL.Parser} qq{gsdl_parser_env_else_needs_comma_set} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.else.get}) qq{GSDL.Parser} qq{gsdl_parser_env_else_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.else.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_else_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.empty}) qq{GSDL.Parser} qq{gsdl_parser_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.generator.get}) qq{GSDL.Parser} qq{gsdl_parser_env_generator_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.generator.modify}) qq{GSDL.Parser} qq{gsdl_parser_env_generator_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.generator.set}) qq{GSDL.Parser} qq{gsdl_parser_env_generator_set} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.missing-body.get}) qq{GSDL.Parser} qq{gsdl_parser_env_missing_body_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.missing-body.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_missing_body_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.missing-else.get}) qq{GSDL.Parser} qq{gsdl_parser_env_missing_else_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.missing-else.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_missing_else_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.pattern.get}) qq{GSDL.Parser} qq{gsdl_parser_env_pattern_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.pattern.modify}) qq{GSDL.Parser} qq{gsdl_parser_env_pattern_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.qlo.get}) qq{GSDL.Parser} qq{gsdl_parser_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.qlo.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.signature.get}) qq{GSDL.Parser} qq{gsdl_parser_env_signature_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.signature.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_signature_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.signatures.get}) qq{GSDL.Parser} qq{gsdl_parser_env_signatures_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.syntactic-categories}) qq{GSDL.Parser} qq{gsdl_parser_env_syntactic_categories} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.syntactic-category.get}) qq{GSDL.Parser} qq{gsdl_parser_env_syntactic_category_get} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.env.syntactic-category.insert}) qq{GSDL.Parser} qq{gsdl_parser_env_syntactic_category_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.eof}) qq{GSI.Parser} qq{gseof} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.fail}) qq{GSI.Parser} qq{gsparser_fail} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.for}) qq{GSI.Parser} qq{gsparserFor} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.global-env}) qq{GSDL.GlobalEnv} qq{gsparser_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.map2}) qq{GSI.Parser} qq{gsparser_map2} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.map}) qq{GSI.Parser} qq{gsparser_map} $
    hscompiler.env.var.simple-insert (gsvar qq{parser.unit}) qq{GSI.Parser} qq{gsparser_unit} $
    hscompiler.env.var.simple-insert (gsvar qq{parse}) qq{GSI.Parser} qq{gsparse} $
    hscompiler.env.var.simple-insert (gsvar qq{pat.app}) qq{GSDL.AST} qq{gspat_app} $
    hscompiler.env.var.simple-insert (gsvar qq{pat.bound-vars}) qq{GSDL.Annotator} qq{gspat_bound_vars} $
    hscompiler.env.var.simple-insert (gsvar qq{pat.discard}) qq{GSDL.AST} qq{gspat_discard} $
    hscompiler.env.var.simple-insert (gsvar qq{pat.qlo}) qq{GSDL.AST} qq{gspat_qlo} $
    hscompiler.env.var.simple-insert (gsvar qq{pat.var}) qq{GSDL.AST} qq{gspat_var} $
    hscompiler.env.var.simple-insert (gsvar qq{pat.view}) qq{GSDL.AST} qq{gspat_view} $
    hscompiler.env.var.simple-insert (gsvar qq{pos.fmt}) qq{GSI.Parser} qq{gsposFmt} $
    hscompiler.env.var.simple-insert (gsvar qq{pos.init}) qq{GSI.Parser} qq{gspos_init} $
    hscompiler.env.var.simple-insert (gsvar qq{pragma.whitespace}) qq{GSDL.Syntax} qq{pragmawhitespace} $
    hscompiler.env.var.simple-insert (gsvar qq{pragmas}) qq{GSDL.Syntax} qq{pragmas} $
    hscompiler.env.var.simple-insert (gsvar qq{print-error}) qq{GSI.Env} qq{gsprintError} $
    hscompiler.env.var.simple-insert (gsvar qq{print-rune}) qq{GSI.Parser} qq{gsparser_print_rune} $
    hscompiler.env.var.simple-insert (gsvar qq{print}) qq{GSI.Env} qq{gsprint} $
    hscompiler.env.var.simple-insert (gsvar qq{qloitem.char}) qq{GSDL.AST} qq{gsqloitem_char} $
    hscompiler.env.var.simple-insert (gsvar qq{qloitem.interp}) qq{GSDL.AST} qq{gsqloitem_interp} $
    hscompiler.env.var.simple-insert (gsvar qq{qloitem.qchar}) qq{GSDL.AST} qq{gsqloitem_qchar} $
    hscompiler.env.var.simple-insert (gsvar qq{quote-param.hsvs}) qq{GSDL.HSGS.AST} qq{gsquote_param_hsvs} $
    hscompiler.env.var.simple-insert (gsvar qq{quote}) qq{GSDL.HSGS.Syntax} qq{quote} $
    hscompiler.env.var.simple-insert (gsvar qq{rational.>}) qq{GSI.Rational} qq{gsrational_gt} $
    hscompiler.env.var.simple-insert (gsvar qq{record.∧}) qq{GSI.StdLib} qq{gsrecord_and} $
    hscompiler.env.var.simple-insert (gsvar qq{repeat}) qq{GSI.List} qq{gsrepeat} $
    hscompiler.env.var.simple-insert (gsvar qq{replicate}) qq{GSI.List} qq{gsreplicate} $
    hscompiler.env.var.simple-insert (gsvar qq{right}) qq{GSI.Either} qq{gsright} $
    hscompiler.env.var.simple-insert (gsvar qq{rune.<=>}) qq{GSI.Rune} qq{gsrune_compare} $
    hscompiler.env.var.simple-insert (gsvar qq{rune.code-point}) qq{GSI.Rune} qq{gsrune_code_point} $
    hscompiler.env.var.simple-insert (gsvar qq{rune.from-code-point}) qq{GSI.Rune} qq{gsrune_from_code_point} $
    hscompiler.env.var.simple-insert (gsvar qq{rune.≠}) qq{GSI.Rune} qq{gsrune_neq} $
    hscompiler.env.var.simple-insert (gsvar qq{rune.≡}) qq{GSI.Rune} qq{gsruneEq} $
    hscompiler.env.var.simple-insert (gsvar qq{source-comp.char}) qq{GSDL.HSGS.AST} qq{gssource_comp_char} $
    hscompiler.env.var.simple-insert (gsvar qq{source-comp.declare}) qq{GSDL.HSGS.AST} qq{gssource_comp_declare} $
    hscompiler.env.var.simple-insert (gsvar qq{source-comp.expr}) qq{GSDL.HSGS.AST} qq{gssource_comp_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{source-comp.imports}) qq{GSDL.HSGS.AST} qq{gssource_comp_imports} $
    hscompiler.env.var.simple-insert (gsvar qq{source-comp.pos}) qq{GSDL.HSGS.AST} qq{gssource_comp_pos} $
    hscompiler.env.var.simple-insert (gsvar qq{source-comp.value}) qq{GSDL.HSGS.AST} qq{gssource_comp_value} $
    hscompiler.env.var.simple-insert (gsvar qq{split-on}) qq{GSI.List} qq{gssplit_on} $
    hscompiler.env.var.simple-insert (gsvar qq{st.get-var}) qq{GSI.ST} qq{gsstgetvar} $
    hscompiler.env.var.simple-insert (gsvar qq{st.ref.new}) qq{GSI.ST} qq{gsstrefnew} $
    hscompiler.env.var.simple-insert (gsvar qq{st.ref.≡}) qq{GSI.ST} qq{gsstrefeq} $
    hscompiler.env.var.simple-insert (gsvar qq{st.run}) qq{GSI.ST} qq{gsstrun} $
    hscompiler.env.var.simple-insert (gsvar qq{st.set-var}) qq{GSI.ST} qq{gsstsetvar} $
    hscompiler.env.var.simple-insert (gsvar qq{string}) qq{GSI.Parser} qq{gsparser_string} $
    hscompiler.env.var.simple-insert (gsvar qq{symbol}) qq{GSI.Parser} qq{gssymbol} $
    hscompiler.env.var.simple-insert (gsvar qq{syntactic-category.arg-operator}) qq{GSDL.AST} qq{gssyntactic_category_arg_operator} $
    hscompiler.env.var.simple-insert (gsvar qq{syntactic-category.lambda-like}) qq{GSDL.AST} qq{gssyntactic_category_lambda_like} $
    hscompiler.env.var.simple-insert (gsvar qq{syntactic-category.variable}) qq{GSDL.AST} qq{gssyntactic_category_variable} $
    hscompiler.env.var.simple-insert (gsvar qq{syntactic-category.where}) qq{GSDL.AST} qq{gssyntactic_category_where} $
    hscompiler.env.var.simple-insert (gsvar qq{system}) qq{GSI.Env} qq{gssystem} $
    hscompiler.env.var.simple-insert (gsvar qq{tail.modify}) qq{GSI.List} qq{gstail_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{take}) qq{GSI.List} qq{gstake} $
    hscompiler.env.var.simple-insert (gsvar qq{test-gsi.gsrun}) qq{TestGSI.RunTime} qq{gstest_gsi_gsrun} $
    hscompiler.env.var.simple-insert (gsvar qq{test-gsi.gstyc}) qq{TestGSI.CompileTime} qq{gstest_gsi_gstyc} $
    hscompiler.env.var.simple-insert (gsvar qq{tokens.modify}) qq{GSI.List} qq{gstokens_modify} $
    hscompiler.env.var.simple-insert (gsvar qq{true}) qq{GSI.Bool} qq{gstrue} $
    hscompiler.env.var.simple-insert (gsvar qq{type-check-arg}) qq{GSDL.TypeCheck} qq{gstype_check_arg} $
    hscompiler.env.var.simple-insert (gsvar qq{type-check-document}) qq{GSDL.TypeCheck} qq{gstype_check_document} $
    hscompiler.env.var.simple-insert (gsvar qq{type-check-expr}) qq{GSDL.TypeCheck} qq{gstype_check_expr} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.>>=}) qq{GSDL.TypeChecker} qq{gstype_checker_bind} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.analyzeM}) qq{GSDL.TypeChecker} qq{gstype_checker_analyzeM} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.env.get-arg-var-type}) qq{GSDL.TypeChecker} qq{gstype_checker_env_get_arg_var_type} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.env.get-generator-type}) qq{GSDL.TypeChecker} qq{gstype_checker_env_get_generator_type} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.env.get-qlo}) qq{GSDL.TypeChecker} qq{gstype_checker_env_get_qlo} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.env.get-type}) qq{GSDL.TypeChecker} qq{gstype_checker_env_get_type} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.env.get-view-type}) qq{GSDL.TypeChecker} qq{gstype_checker_env_get_view_type} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.fail}) qq{GSDL.TypeChecker} qq{gstype_checker_fail} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.fmt-type}) qq{GSDL.TypeChecker} qq{gstype_checker_fmt_type} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.foldM}) qq{GSDL.TypeChecker} qq{gstype_checker_foldM} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.for}) qq{GSDL.TypeChecker} qq{gstype_checker_for} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.get-var}) qq{GSDL.TypeChecker} qq{gstype_checker_get_var} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.global-env}) qq{GSDL.GlobalEnv} qq{gstype_checker_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.hnormalize}) qq{GSDL.TypeChecker} qq{gstype_checker_hnormalize} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.incorrect-type}) qq{GSDL.TypeChecker} qq{gstype_checker_incorrect_type} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.mapM}) qq{GSDL.TypeChecker} qq{gstype_checker_mapM} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.map}) qq{GSDL.TypeChecker} qq{gstype_checker_map} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.new-unifiable-var}) qq{GSDL.TypeChecker} qq{gs_type_checker_new_unifiable_var} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.run}) qq{GSDL.TypeChecker} qq{gstype_checker_run} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.set-var}) qq{GSDL.TypeChecker} qq{gstype_checker_set_var} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.subst}) qq{GSDL.TypeChecker} qq{gstype_checker_subst} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.unify}) qq{GSDL.TypeChecker} qq{gstype_checker_unify} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.unit}) qq{GSDL.TypeChecker} qq{gstype_checker_unit} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.with-type-env}) qq{GSDL.TypeChecker} qq{gstype_checker_with_type_env} $
    hscompiler.env.var.simple-insert (gsvar qq{type-checker.zip-withM}) qq{GSDL.TypeChecker} qq{gstype_checker_zipWithM} $
    hscompiler.env.var.simple-insert (gsvar qq{type.apply}) qq{GSDL.AST} qq{gstype_apply} $
    hscompiler.env.var.simple-insert (gsvar qq{type.app}) qq{GSDL.AST} qq{gstype_app} $
    hscompiler.env.var.simple-insert (gsvar qq{type.consts}) qq{GSDL.AST} qq{gstype_consts} $
    hscompiler.env.var.simple-insert (gsvar qq{type.const}) qq{GSDL.AST} qq{gstype_const} $
    hscompiler.env.var.simple-insert (gsvar qq{type.empty-signature}) qq{GSDL.AST} qq{gstype_empty_signature} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.arg-var-type.get}) qq{GSDL.AST} qq{gstype_env_arg_var_type_get} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.arg-var-type.insert}) qq{GSDL.AST} qq{gstype_env_arg_var_type_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.empty}) qq{GSDL.AST} qq{gstype_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.filter}) qq{GSDL.AST} qq{gstype_env_filter} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.generator-type.get}) qq{GSDL.AST} qq{gstype_env_generator_type_get} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.generator-type.insert}) qq{GSDL.AST} qq{gstype_env_generator_type_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.overlay}) qq{GSDL.AST} qq{gstype_env_overlay} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.qlo.get}) qq{GSDL.AST} qq{gstype_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.qlo.insert}) qq{GSDL.AST} qq{gstype_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.type.get}) qq{GSDL.AST} qq{gstype_env_type_get} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.type.insert}) qq{GSDL.AST} qq{gstype_env_type_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.types}) qq{GSDL.AST} qq{gstype_env_types} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.var-types}) qq{GSDL.AST} qq{gstype_env_var_types} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.vars}) qq{GSDL.AST} qq{gstype_env_vars} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.view-type.get}) qq{GSDL.AST} qq{gstype_env_view_type_get} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.view-type.insert}) qq{GSDL.AST} qq{gstype_env_view_type_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{type.env.views}) qq{GSDL.AST} qq{gstype_env_views} $
    hscompiler.env.var.simple-insert (gsvar qq{type.forall}) qq{GSDL.AST} qq{gstype_forall} $
    hscompiler.env.var.simple-insert (gsvar qq{type.function}) qq{GSDL.AST} qq{gstype_function} $
    hscompiler.env.var.simple-insert (gsvar qq{type.list}) qq{GSDL.AST} qq{gstype_list} $
    hscompiler.env.var.simple-insert (gsvar qq{type.signature}) qq{GSDL.AST} qq{gstype_signature} $
    hscompiler.env.var.simple-insert (gsvar qq{type.unifiable-var}) qq{GSDL.AST} qq{gstype_unifiable_var} $
    hscompiler.env.var.simple-insert (gsvar qq{undefined}) qq{GSI.StdLib} qq{gsundefined} $
    hscompiler.env.var.simple-insert (gsvar qq{validate-document}) qq{GSDL.Validate} qq{gsvalidate_document} $
    hscompiler.env.var.simple-insert (gsvar qq{validate-qloitem}) qq{GSDL.Validate} qq{gsvalidate_qloitem} $
    hscompiler.env.var.simple-insert (gsvar qq{validator.env.empty}) qq{GSDL.Validator} qq{gsvalidator_env_empty} $
    hscompiler.env.var.simple-insert (gsvar qq{validator.env.in-scope.insert}) qq{GSDL.Validator} qq{gsvalidator_env_in_scope_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{validator.env.in-scope}) qq{GSDL.Validator} qq{gsvalidator_env_in_scope} $
    hscompiler.env.var.simple-insert (gsvar qq{validator.env.qlo.get}) qq{GSDL.Validator} qq{gsvalidator_env_qlo_get} $
    hscompiler.env.var.simple-insert (gsvar qq{validator.env.qlo.insert}) qq{GSDL.Validator} qq{gsvalidator_env_qlo_insert} $
    hscompiler.env.var.simple-insert (gsvar qq{validator.global-env}) qq{GSDL.GlobalEnv} qq{gsvalidator_global_env} $
    hscompiler.env.var.simple-insert (gsvar qq{value}) qq{GSI.StdLib} qq{gsvalue} $
    hscompiler.env.var.simple-insert (gsvar qq{whitespace}) qq{GSDL.Syntax} qq{whitespace} $
    hscompiler.env.var.simple-insert (gsvar qq{zip}) qq{GSI.List} qq{gszip} $
    hscompiler.env.var.simple-insert (gsvar qq{||}) qq{GSI.Bool} qq{gsshort_circuit_or} $
    hscompiler.env.var.simple-insert (gsvar qq{λ}) qq{GSI.StdLib} qq{gslambda} $
    hscompiler.env.var.simple-insert (gsvar qq{∘}) qq{GSI.StdLib} qq{gscompose} $
    hscompiler.env.view.simple-insert (gsvar qq{ENOENT}) qq{GSI.Env} qq{gsENOENT_view} $
    hscompiler.env.view.simple-insert (gsvar qq{arg.app}) qq{GSDL.AST} qq{gsarg_app_view} $
    hscompiler.env.view.simple-insert (gsvar qq{arg.explicit}) qq{GSDL.AST} qq{gsarg_explicit_view} $
    hscompiler.env.view.simple-insert (gsvar qq{arg.expr}) qq{GSDL.AST} qq{gsarg_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{arg.var-name}) qq{GSDL.AST} qq{gsarg_var_name_view} $
    hscompiler.env.view.simple-insert (gsvar qq{arg.var}) qq{GSDL.AST} qq{gsarg_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{assoc.left}) qq{GSDL.AST} qq{gsassoc_left_view} $
    hscompiler.env.view.simple-insert (gsvar qq{assoc.non-assoc}) qq{GSDL.AST} qq{gsassoc_non_assoc_view} $
    hscompiler.env.view.simple-insert (gsvar qq{assoc.right}) qq{GSDL.AST} qq{gsassoc_right_view} $
    hscompiler.env.view.simple-insert (gsvar qq{category.fallible}) qq{GSDL.AST} qq{gscategory_fallible_view} $
    hscompiler.env.view.simple-insert (gsvar qq{category.monadic}) qq{GSDL.AST} qq{gscategory_monadic_view} $
    hscompiler.env.view.simple-insert (gsvar qq{consume.monad}) qq{GSDL.AST} qq{gsconsume_monad_view} $
    hscompiler.env.view.simple-insert (gsvar qq{dest-comp.char}) qq{GSDL.HSGS.AST} qq{gsdest_comp_char_view} $
    hscompiler.env.view.simple-insert (gsvar qq{dest-comp.expr}) qq{GSDL.HSGS.AST} qq{gsdest_comp_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{dest-comp.imports}) qq{GSDL.HSGS.AST} qq{gsdest_comp_imports_view} $
    hscompiler.env.view.simple-insert (gsvar qq{dest-comp.pos}) qq{GSDL.HSGS.AST} qq{gsdest_comp_pos_view} $
    hscompiler.env.view.simple-insert (gsvar qq{document.in}) qq{GSDL.AST} qq{gsdocument_in_view} $
    hscompiler.env.view.simple-insert (gsvar qq{eq}) qq{GSI.OrderTotal} qq{gsord_eq_view} $
    hscompiler.env.view.simple-insert (gsvar qq{eval-state.error}) qq{GSI.GSI} qq{gseval_state_error_view} $
    hscompiler.env.view.simple-insert (gsvar qq{eval-state.implementation-failure}) qq{GSI.GSI} qq{gseval_state_implementation_failure_view} $
    hscompiler.env.view.simple-insert (gsvar qq{eval-state.whnf}) qq{GSI.GSI} qq{gseval_state_whnf_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.app}) qq{GSDL.AST} qq{gsexpr_app_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.fallible-pat}) qq{GSDL.AST} qq{gsexpr_fallible_pat_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.generators}) qq{GSDL.AST} qq{gsexpr_generators_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.missing-case}) qq{GSDL.AST} qq{gsexpr_missing_case_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.monadic-generators}) qq{GSDL.AST} qq{gsexpr_monadic_generators_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.monad}) qq{GSDL.AST} qq{gsexpr_monad_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.natural}) qq{GSDL.AST} qq{gsexpr_natural_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.open-expr}) qq{GSDL.AST} qq{gsexpr_open_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.pat}) qq{GSDL.AST} qq{gsexpr_pat_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.qlo}) qq{GSDL.AST} qq{gsexpr_qlo_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.structure-literal}) qq{GSDL.AST} qq{gsexpr_structure_literal_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.unary}) qq{GSDL.AST} qq{gsexpr_unary_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.value-var}) qq{GSDL.AST} qq{gsexpr_value_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{expr.var}) qq{GSDL.AST} qq{gsexpr_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{false}) qq{GSI.Bool} qq{gsfalse_view} $
    hscompiler.env.view.simple-insert (gsvar qq{file.document}) qq{GSDL.AST} qq{gsfile_document_view} $
    hscompiler.env.view.simple-insert (gsvar qq{generator.app}) qq{GSDL.AST} qq{gsgenerator_app_view} $
    hscompiler.env.view.simple-insert (gsvar qq{generator.expr}) qq{GSDL.AST} qq{gsgenerator_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{generator.pattern}) qq{GSDL.AST} qq{gsgenerator_pattern_view} $
    hscompiler.env.view.simple-insert (gsvar qq{generator.var}) qq{GSDL.AST} qq{gsgenerator_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{gsvar}) qq{GSI.GSI} qq{gsigsvar_view} $
    hscompiler.env.view.simple-insert (gsvar qq{gt}) qq{GSI.OrderTotal} qq{gsord_gt_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.app}) qq{GSDL.HSGS.AST} qq{gshsexpr_app_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.char}) qq{GSDL.HSGS.AST} qq{gshsexpr_char_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.int}) qq{GSDL.HSGS.AST} qq{gshsexpr_int_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.lambda}) qq{GSDL.HSGS.AST} qq{gshsexpr_lambda_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.list}) qq{GSDL.HSGS.AST} qq{gshsexpr_list_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.string}) qq{GSDL.HSGS.AST} qq{gshsexpr_string_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsexpr.var}) qq{GSDL.HSGS.AST} qq{gshsexpr_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsfunction.in}) qq{GSDL.HSGS.AST} qq{gshsfunction_in_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsimport.type}) qq{GSDL.HSGS.AST} qq{gshsimport_type_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsimport.var}) qq{GSDL.HSGS.AST} qq{gshsimport_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{hsmodule.in}) qq{GSDL.HSGS.AST} qq{gshsmodule_in_view} $
    hscompiler.env.view.simple-insert (gsvar qq{just}) qq{GSI.Maybe} qq{gsjust_view} $
    hscompiler.env.view.simple-insert (gsvar qq{left}) qq{GSI.Either} qq{gsleft_view} $
    hscompiler.env.view.simple-insert (gsvar qq{lt}) qq{GSI.OrderTotal} qq{gsord_lt_view} $
    hscompiler.env.view.simple-insert (gsvar qq{nil}) qq{GSI.List} qq{gsnil_view} $
    hscompiler.env.view.simple-insert (gsvar qq{nothing}) qq{GSI.Maybe} qq{gsnothing_view} $
    hscompiler.env.view.simple-insert (gsvar qq{order-of-being.expr}) qq{GSDL.AST} qq{gsorder_of_being_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{order-of-being.generator}) qq{GSDL.AST} qq{gsorder_of_being_generator_view} $
    hscompiler.env.view.simple-insert (gsvar qq{order-of-being.open-expr}) qq{GSDL.AST} qq{gsorder_of_being_open_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{order-of-being.pattern}) qq{GSDL.AST} qq{gsorder_of_being_pattern_view} $
    hscompiler.env.view.simple-insert (gsvar qq{order-of-being.value-var}) qq{GSDL.AST} qq{gsorder_of_being_value_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{order-of-being.var-name}) qq{GSDL.AST} qq{gsorder_of_being_var_name_view} $
    hscompiler.env.view.simple-insert (gsvar qq{parser.prim.fail}) qq{GSI.Parser} qq{gsprim_fail_view} $
    hscompiler.env.view.simple-insert (gsvar qq{parser.prim.symbol-or-eof}) qq{GSI.Parser} qq{gsprim_symbol_view} $
    hscompiler.env.view.simple-insert (gsvar qq{parser.prim.unit-plus}) qq{GSI.Parser} qq{gsprim_unit_plus_view} $
    hscompiler.env.view.simple-insert (gsvar qq{pat.app}) qq{GSDL.AST} qq{gspat_app_view} $
    hscompiler.env.view.simple-insert (gsvar qq{pat.discard}) qq{GSDL.AST} qq{gspat_discard_view} $
    hscompiler.env.view.simple-insert (gsvar qq{pat.qlo}) qq{GSDL.AST} qq{gspat_qlo_view} $
    hscompiler.env.view.simple-insert (gsvar qq{pat.var}) qq{GSDL.AST} qq{gspat_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{pat.view}) qq{GSDL.AST} qq{gspat_view_view} $
    hscompiler.env.view.simple-insert (gsvar qq{qloitem.char}) qq{GSDL.AST} qq{gsqloitem_char_view} $
    hscompiler.env.view.simple-insert (gsvar qq{qloitem.interp}) qq{GSDL.AST} qq{gsqloitem_interp_view} $
    hscompiler.env.view.simple-insert (gsvar qq{qloitem.qchar}) qq{GSDL.AST} qq{gsqloitem_qchar_view} $
    hscompiler.env.view.simple-insert (gsvar qq{quote-param.hsvs}) qq{GSDL.HSGS.AST} qq{gsquote_param_hsvs_view} $
    hscompiler.env.view.simple-insert (gsvar qq{right}) qq{GSI.Either} qq{gsright_view} $
    hscompiler.env.view.simple-insert (gsvar qq{source-comp.char}) qq{GSDL.HSGS.AST} qq{gssource_comp_char_view} $
    hscompiler.env.view.simple-insert (gsvar qq{source-comp.declare}) qq{GSDL.HSGS.AST} qq{gssource_comp_declare_view} $
    hscompiler.env.view.simple-insert (gsvar qq{source-comp.expr}) qq{GSDL.HSGS.AST} qq{gssource_comp_expr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{source-comp.imports}) qq{GSDL.HSGS.AST} qq{gssource_comp_imports_view} $
    hscompiler.env.view.simple-insert (gsvar qq{source-comp.pos}) qq{GSDL.HSGS.AST} qq{gssource_comp_pos_view} $
    hscompiler.env.view.simple-insert (gsvar qq{source-comp.value}) qq{GSDL.HSGS.AST} qq{gssource_comp_value_view} $
    hscompiler.env.view.simple-insert (gsvar qq{syntactic-category.arg-operator}) qq{GSDL.AST} qq{gssyntactic_category_arg_operator_view} $
    hscompiler.env.view.simple-insert (gsvar qq{syntactic-category.lambda-like}) qq{GSDL.AST} qq{gssyntactic_category_lambda_like_view} $
    hscompiler.env.view.simple-insert (gsvar qq{syntactic-category.variable}) qq{GSDL.AST} qq{gssyntactic_category_variable_view} $
    hscompiler.env.view.simple-insert (gsvar qq{syntactic-category.where}) qq{GSDL.AST} qq{gssyntactic_category_where_view} $
    hscompiler.env.view.simple-insert (gsvar qq{true}) qq{GSI.Bool} qq{gstrue_view} $
    hscompiler.env.view.simple-insert (gsvar qq{type.app}) qq{GSDL.AST} qq{gstype_app_view} $
    hscompiler.env.view.simple-insert (gsvar qq{type.const}) qq{GSDL.AST} qq{gstype_const_view} $
    hscompiler.env.view.simple-insert (gsvar qq{type.forall}) qq{GSDL.AST} qq{gstype_forall_view} $
    hscompiler.env.view.simple-insert (gsvar qq{type.function}) qq{GSDL.AST} qq{gstype_function_view} $
    hscompiler.env.view.simple-insert (gsvar qq{type.signature}) qq{GSDL.AST} qq{gstype_signature_view} $
    hscompiler.env.view.simple-insert (gsvar qq{type.unifiable-var}) qq{GSDL.AST} qq{gstype_unifiable_var_view} $
    hscompiler.env.view.simple-insert (gsvar qq{whnf.constr}) qq{GSI.GSI} qq{gswhnf_constr_view} $
    hscompiler.env.view.simple-insert (gsvar qq{whnf.function}) qq{GSI.GSI} qq{gswhnf_function_view} $
    hscompiler.env.view.simple-insert (gsvar qq{whnf.natural}) qq{GSI.GSI} qq{gswhnf_natural_view} $
    hscompiler.env.view.simple-insert (gsvar qq{whnf.record}) qq{GSI.GSI} qq{gswhnf_record_view} $
    hscompiler.env.view.simple-insert (gsvar qq{whnf.rune}) qq{GSI.GSI} qq{gswhnf_rune_view} $
    hscompiler.env.arg-var.insert (gsvar qq{#}) (λ 'env. λ 'pos. λ 'f. λ 'as. analyze as.
        case arg.var-name 'v : nil. either.for 'p ← hscompile-arg nothing env (arg.expr pos f);. right $
            hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcfield_w} pos (p : hsoutput.gsvar v : nil)
    ) $
    hscompiler.env.qlo.insert (gsvar qq{r}) (λ 'env. λ 'pos. λ 'qi. analyze qi.
        case qloitem.char 'r. right $ hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcchar_w} pos (hsoutput.char r : nil)
    ) $
    hscompiler.env.qlo.insert (gsvar qq{qq}) (λ 'env. λ 'pos. λ 'qs.
        either.map (hsoutput.applyivarpos qq{GSI.String} qq{gsbcstring_w} pos) $ either.map list.singleton $ either.map hsoutput.list $
            either.map (map (hsoutput.arg-expr pos)) $ either.mapM
                (λ 'qi. analyze qi.
                    case qloitem.char 'r. right $ hsoutput.applyivarpos qq{GSI.String} qq{gsbcstringlit_w} pos (hsoutput.string (r : nil) : nil)
                    case qloitem.qchar 'r. either.for 'r1 ← hscompile-qchar r;.
                        right $ hsoutput.applyivarpos qq{GSI.String} qq{gsbcstringlit_w} pos (hsoutput.string (r1 : nil) : nil)
                    case qloitem.interp 'pos1 'e. hscompile-expr env hscompiler.supply.env.empty pos1 e
                )
                qs
    ) $
    hscompiler.env.qlo.insert (gsvar qq{log}) (λ 'env. λ 'pos. λ 'qs.
        either.map (hsoutput.applyivarpos qq{GSI.Log} qq{gsbclog_w} pos) $ either.map list.singleton $ either.map hsoutput.list $ either.mapM
            (for 'output-char ∝ λ 'ch. right $ hsoutput.arg-expr pos $ hsoutput.applyivarpos qq{GSI.Log} qq{gsbclogstring_w} pos (hsoutput.string (ch : nil) : nil);.
                λ 'qi. analyze qi.
                    case qloitem.char 'ch. output-char ch
                    case qloitem.qchar r{\\}. output-char r{\\}
                    case qloitem.qchar r{n}. output-char r{\n}
                    case qloitem.interp 'pos1 'e. either.map (hsoutput.arg-expr pos1) $ hscompile-expr env hscompiler.supply.env.empty pos1 e
            )
            qs
    ) $
    hscompiler.env.pattern.modify (hscompiler.env.qlo.insert (gsvar qq{qq}) (λ 'env. λ 'pos. λ 'p. foldr
        (λ 'qi. λ 'k. either.for
                'ch1 ← analyze qi.
                    case qloitem.char 'ch. right ch
                    case qloitem.qchar 'ch. hscompile-qchar ch
                ;
                'p1 ← k;
            . right $ hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcviewpattern_w} pos (
                hsoutput.ivar qq{GSI.List} qq{gscons_view} :
                hsoutput.list (
                    hsoutput.arg-expr pos (hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcrunepattern_w} pos (hsoutput.char ch1 : nil)) :
                    hsoutput.arg-expr pos p1 :
                    nil
                ) :
                nil
            )
        )
        (analyze p #1.
            case nothing. right $ hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcviewpattern_w} pos (
                hsoutput.ivar qq{GSI.List} qq{gsnil_view} :
                hsoutput.list nil :
                nil
            )
            case just (qloitem.interp 'pos1 'p). hscompile-fallible-pat env pos1 p
        )
        (p #0)
    )) $
    hscompiler.env.pattern.modify (hscompiler.env.qlo.insert (gsvar qq{r}) (λ 'env. λ 'pos. λ 'qi. either.for
            'ch1 ← analyze qi.
                case qloitem.char 'ch. right ch
                case qloitem.qchar 'ch. hscompile-qchar ch
            ;
        . right $ hsoutput.applyivarpos qq{GSI.ByteCode} qq{gsbcrunepattern_w} pos (hsoutput.char ch1 : nil)
    )) $
    hscompiler.env.empty
|]

gshscompiler_hsgs_global_env = [gs:value|
    hscompiler.env.unary.modify (hscompiler.env.var.simple-insert (gsvar qq{+}) qq{GSI.Natural} qq{gsnatural_unary_plus}) $
    hscompiler.env.var.simple-insert (gsvar qq{*}) qq{GSI.Natural} qq{gsnatural_multiply} $
    hscompiler.env.var.simple-insert (gsvar qq{+}) qq{GSI.Natural} qq{gsnatural_add} $
    hscompiler.env.var.simple-insert (gsvar qq{-?}) qq{GSI.Natural} qq{gsnatural_subtract_maybe} $
    hscompiler.env.var.simple-insert (gsvar qq{-}) qq{GSI.Natural} qq{gsnatural_subtract} $
    hscompiler.env.var.simple-insert (gsvar qq{:}) qq{GSI.List} qq{gscons} $
    hscompiler.env.var.simple-insert (gsvar qq{≠}) qq{GSI.Rune} qq{gsrune_neq} $
    hscompiler.env.view.simple-insert (gsvar qq{:}) qq{GSI.List} qq{gscons_view} $
    hscompiler.global-env
|]

gshscompiler_env_supply_monad_simple_insert = [gs:value| λ 'v. λ 'm. λ 'hsv. hscompiler.env.supply.monad.insert v (hsoutput.ivar m hsv) |]
gshscompiler_env_var_simple_insert = [gs:value| λ 'v. λ 'm. λ 'hsv. hscompiler.env.var.insert v (hsoutput.ivar m hsv) |]
gshscompiler_env_view_simple_insert = [gs:value| λ 'v. λ 'm. λ 'hsv. hscompiler.env.view.insert v (hsoutput.ivar m hsv) |]

gshscompile_qchar = [gs:value| λ 'r. analyze r.
    case r{n}. right r{\n}
    case r{\[}. right r{\[}
|]
