module GSDL.HSCompiler (gshscompiler_env_var_insert, gshscompiler_env_var_get, gshscompiler_env_constr_insert, gshscompiler_env_constr_get, gshscompiler_env_view_insert, gshscompiler_env_view_get, gshscompiler_env_gen_sym, gshscompiler_env_generator_get, gshscompiler_env_generator_modify, gshscompiler_env_pattern_get, gshscompiler_env_unary_get, gshscompiler_env_unary_modify, gshscompiler_env_arg_var_insert, gshscompiler_env_arg_var_get, gshscompiler_env_supply_get, gshscompiler_env_supply_monad_insert, gshscompiler_env_qlo_get, gshscompiler_env_qlo_insert, gshscompiler_env_empty, gshscompiler_supply_env_monad_get, gshscompiler_supply_env_empty) where

$gsimports

gshscompiler_env_gen_sym = [gs:value| λ 'env. λ 'k. k qq{x§(natural.fmt-decimal (env #gen-sym))} $
    record.∧ 〈 'gen-sym ∝ env #gen-sym + 1; 〉 env
|]

gshscompiler_env_var_insert = [gs:value| λ 'v. λ 'a. λ 'env.  record.∧ 〈 'vars ∝ ordered-map.insert gsvar.<=> v a (env #vars); 〉 env |]

gshscompiler_env_constr_insert = [gs:value| λ 'v. λ 'env. record.∧ 〈 'constrs ∝ ordered-set.insert gsvar.<=> v (env #constrs); 〉 env |]

gshscompiler_env_view_insert = [gs:value| λ 'v. λ 'a. λ 'env. record.∧ 〈 'views ∝ ordered-map.insert gsvar.<=> v a (env #views); 〉 env |]

gshscompiler_env_arg_var_insert = [gs:value| λ 'v. λ 'f. λ 'env. record.∧ 〈 'arg-vars ∝ ordered-map.insert gsvar.<=> v f (env #arg-vars); 〉 env |]

gshscompiler_env_qlo_insert = [gs:value| λ 'q. λ 'f. λ 'env. record.∧ 〈 'qlo ∝ ordered-map.insert gsvar.<=> q f (env #qlo); 〉 env |]

gshscompiler_env_var_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.<=> v (env #vars) |]
gshscompiler_env_constr_get = [gs:value| λ 'v. λ 'env. ordered-set.∈ gsvar.<=> v (env #constrs) |]
gshscompiler_env_view_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.<=> v (env #views) |]
gshscompiler_env_arg_var_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.<=> v (env #arg-vars) |]

gshscompiler_env_supply_get = [gs:value| λ 'v. λ 'env. maybe.out hscompiler.supply.env.empty (ordered-map.get gsvar.<=> v (env #supplies)) |]

gshscompiler_env_qlo_get = [gs:value| λ 'q. λ 'env. ordered-map.get gsvar.<=> q (env #qlo) |]

gshscompiler_env_generator_get = [gs:value| λ 'env. 〈
    'vars ∝ env #generators;
    'gen-sym ∝ env #gen-sym;
〉 |]

gshscompiler_env_pattern_get = [gs:value| λ 'env. 〈
    'qlo ∝ env #pat.qlo;
    'gen-sym ∝ env #gen-sym;
〉 |]

gshscompiler_env_unary_get = [gs:value| λ 'env. 〈
    'vars ∝ env #unaries;
    'gen-sym ∝ env #gen-sym;
〉 |]

gshscompiler_env_generator_modify = [gs:value| λ 'f. λ 'env. for
        'env2 ∝ for 'env1 ∝ f (hscompiler.env.generator.get env);. 〈
            'generators ∝ env1 #vars;
            'gen-sym ∝ env1 #gen-sym;
        〉;
    . record.∧ env2 env
|]

gshscompiler_env_unary_modify = [gs:value| λ 'f. λ 'env. for
        'env2 ∝ for 'env1 ∝ f (hscompiler.env.unary.get env);. 〈
            'unaries ∝ env1 #vars;
            'gen-sym ∝ env1 #gen-sym;
        〉;
    . record.∧ env2 env
|]

gshscompiler_env_supply_modify = [gs:value| λ 'v. λ 'f. λ 'env. for 'senv0 ∝ maybe.out hscompiler.supply.env.empty (ordered-map.get gsvar.<=> v (env #supplies));.
    record.∧ 〈 'supplies ∝ ordered-map.insert gsvar.<=> v (f senv0) (env #supplies); 〉 env
|]

gshscompiler_env_supply_monad_insert = [gs:value| λ 'f. λ 'a. λ 'env. hscompiler.env.supply.modify f (hscompiler.supply.env.monad.insert a) env |]

gshscompiler_env_empty = [gs:value| 〈
    'vars ∝ ordered-map.empty;
    'constrs ∝ ordered-set.empty;
    'unaries ∝ ordered-map.empty;
    'views ∝ ordered-map.empty;
    'generators ∝ ordered-map.empty;
    'pat.qlo ∝ ordered-map.empty;
    'arg-vars ∝ ordered-map.empty;
    'supplies ∝ ordered-map.empty;
    'qlo ∝ ordered-map.empty;
    'gen-sym ∝ 0;
〉 |]

gshscompiler_supply_env_monad_get = [gs:value| λ 'env. env #monad |]

gshscompiler_supply_env_monad_insert = [gs:value| λ 'm. λ 'env. record.∧ 〈 'monad ∝ just m; 〉 env |]

gshscompiler_supply_env_empty = [gs:value| 〈 'monad ∝ nothing; 〉 |]
