module TestGSI.RunTime (gstest_gsi_gsrun) where

$gsimports

$gsdeclare gsprintstr gsprintstr

gstest_gsi_gsrun = [gs:value| λ 'x. λ 'as. impanalyzeM eval-sync x.
    case eval-state.error 'e. print qq{<Error: §(gsfmt-error e)>\n}
    case eval-state.whnf 'v. (analyze v.
        case whnf.natural 'n. print qq{§(natural.fmt-decimal n)\n}
        case whnf.constr 'pos 'v ('r : ('s : nil)). (analyze gsvar.≡ v (gsvar qq{:}).
            case true. impfor _ ← print qq{qq\{}; _ ← gsprintstr x;. print qq{\}}
        )
        case whnf.function 'f. print qq{<function>\n}
    )
    case eval-state.implementation-failure 'pos 'e. print qq{<Implementation failure: §(pos.fmt pos qq{§(e)})>\n}
|]

gsprintstr = [gs:value| λ 's. impanalyzeM eval-sync s.
    case eval-state.whnf 'v. (analyze v.
        case whnf.constr 'pos 'v ('r : ('s1 : nil)). (analyze gsvar.≡ v (gsvar qq{:}).
            case true. (impanalyzeM eval-sync r.
                case eval-state.whnf 'rv. (analyze rv.
                    case whnf.rune 'r0. impfor _ ← print (r0 : nil);. gsprintstr s1
                )
                case eval-state.implementation-failure 'pos 'e. impfor _ ← print qq{<Implementation failure: §(pos.fmt pos e)>};. gsprintstr s1
            )
        )
        case whnf.constr 'pos 'v nil. (analyze gsvar.≡ v (gsvar qq{nil}).
            case true. impunit 〈〉
        )
    )
    case eval-state.implementation-failure 'pos 'e. print qq{<Implementation failure: §(pos.fmt pos qq{§(e)})\n}
|]
