{-# LANGUAGE TemplateHaskell #-}
module GSI.Parser (gsparse, gsparser_run, gsposFmt, gsparserFor, gsparser_app, gsparser_then, gsparser_unary_then, gsparser_after, gsparser_bind, gsparser_map, gsparser_unit, gsparser_fail, gsparser_map2, gseof, gssymbol, gsparser_matching, gsparser_string, gsparser_char, gsparser_choice, gsparser_optional, gsmany, gsmany1, gsparser_unary_or, gsparser_or, gsparser_getPos, gsempty, gsparser_notFollowedBy, gsprim_unit_plus_view, gsprim_symbol_view, gsparser_advanceRune, gsparser_print_rune) where

import GSI.Syn (gsvar)
import GSI.Value (GSValue, gslambda_value, gsconstr, gsundefined_value, gsav, gsae)
import GSI.ByteCode (gsbcarg, gsbcenter, gsbcapply, gsbcconstr, gsbcconstr_view)
import GSI.List (gsnil, gscons)
$gsimports

$gsdeclare prim.unit gsprimunit

$gsdeclare parse-process gsparse_process
$gsdeclare parse-w gsparsew

gsparse = [gs:value| λ 'adv. λ 'pr. λ 'p. λ 'pos. λ 's. for 'res ∝ parse-w adv pr (parser-run p) pos s;. parse-process (res #0) (res #1) |]

gsparser_run = [gs:value| λ 'p. p prim.unit |]

$gsdeclare fmt-error gsfmtError

gsparse_process = [gs:value| λ 'xn. λ 'err. analyze xn.
    -- > case nil. left err
    case 'x0 : nil. (analyze x0 #1.
        case true. right (x0 #0)
        case false. left err
    )
    case 'x0 : 'xn1. parse-process xn1 err
|]

$gsdeclare prim.empty gsprim_empty

$gsdeclare prim.fail gsprim_fail

$gsdeclare view prim.fail gsprim_fail_view
$gsdeclare view prim.unit-plus gsprim_unit_plus_view
$gsdeclare view prim.get-pos gsprim_get_pos_view
$gsdeclare view prim.lookahead gsprim_lookahead_view
$gsdeclare view prim.symbol-or-eof gsprim_symbol_view

$gsdeclare process-lookahead gsparse_process_lookahead

gsparsew = [gs:value| λ 'adv. λ 'pr. λ 'p. λ 'pos. λ 's. analyze p.
    case prim.fail 'err 'exp. 〈 '0 ∝ nil; '1 ∝ pos.fmt pos qq{Un-expected §(undefined); §(fmt-error err exp)}; 〉
    case prim.unit-plus 'x 'p1. for 'r1 ∝ parse-w adv pr p1 pos s;. 〈
        '0 ∝ 〈 '0 ∝ x; '1 ∝ analyze s. case nil. true case _:_. false; 〉 : r1 #0;
        '1 ∝ r1 #1;
    〉
    case prim.get-pos 'k. parse-w adv pr (k pos) pos s
    case prim.lookahead 'pp. for 'res ∝ parse-w adv pr pp pos s;. parse-w adv pr (process-lookahead prim.empty (res #0) (res #1)) pos s
    case prim.symbol-or-eof 'ek 'sk. (analyze s.
        case nil. parse-w adv pr ek pos s
        case 'c:'s1. (analyze sk c.
            case left 'e. 〈 '0 ∝ nil; '1 ∝ pos.fmt pos qq{Un-expected §(pr c); §(fmt-error (e #0) (e #1))}; 〉
            case right 'p1. parse-w adv pr p1 (adv c pos) s1
        )
    )
|]

$gsdeclare prim.<|> gsprimor

gsparse_process_lookahead = [gs:value| λ 'p. λ 'xn. λ 'err. analyze xn.
    case 'x:'xn1. process-lookahead (prim.<|> p (x #0)) xn1 err
    case nil. prim.<|> p (prim.fail (err #0) (err #1))
|]

gsposFmt :: GSValue
gsposFmt = [gs:value| λ 'pos. λ 'msg. qq{§(pos #filename):§(fmtdecimal (pos #line)):§(fmtdecimal (pos #col)): §(msg)} |]

gsfmtError = [gs:value| λ 'errs. λ 'exps. analyze errs.
    case 'err0:'errs1. qq{§(log.fmt err0); §(fmt-error errs1 exps)}
    case nil. (analyze exps.
        case 'exp0:nil. qq{expected §(log.fmt exp0)}
    )
|]

gsparserFor = [gs:value| λ 'gens. λ 'e. parser.>>= gens e |]

gsparser_bind = [gs:value| λ 'p. λ 'f. λ 'k. p (λ 'x. f x k) |]

gsparser_app = [gs:value| λ 'pf. λ 'px. λ 'k. pf $ λ 'f. px $ λ 'x. k $ f $ x |]

gsparser_then = [gs:value| λ 'p0. λ 'p1. λ 'k. p0 (λ 'x0. p1 k) |]

gsparser_unary_then = [gs:value| λ 'p0. p0 |]

gsparser_after = [gs:value| λ 'p0. λ 'p1. λ 'k. p0 (λ 'x0. p1 (λ 'x1. k x0)) |]

gsparser_map = [gs:value| λ 'f. λ 'p. λ 'k. p (λ 'x. k (f x)) |]

gsparser_unit = [gs:value| λ 'x. λ 'k. k x |]

gsparser_fail = [gs:value| λ 'err. λ 'k. prim.fail (err:nil) nil |]

gsparser_map2 = [gs:value| λ 'f. λ 'p0. λ 'p1. λ 'k. p0 (λ 'x0. p1 (λ 'x1. k (f x0 x1))) |]

gsparser_string = [gs:value| λ 's. analyze s.
    case 'c:'s1. char c *> string s1
    case nil. parser.unit 〈〉
|]

gsparser_char = [gs:value| λ 'ch. matching (display-rune ch) (rune.≡ ch) |]

$gsdeclare prim.symbol-or-eof gsprim_symbol

gseof = [gs:value| λ 'k. prim.symbol-or-eof (k 〈〉) (λ _. left 〈 '0 ∝ nil; '1 ∝ log{EOF}:nil; 〉) |]

gssymbol = [gs:value| matching log{symbol} (λ _. true) |]

gsparser_matching = [gs:value| λ 'cat. λ 'p. λ 'k. prim.symbol-or-eof prim.empty $ λ 'c. analyze p c.
    case false. left 〈 '0 ∝ nil; '1 ∝ cat:nil; 〉
    case true. right (k c)
|]

gsparser_displayRune = [gs:value| undefined |]

gsparser_choice = [gs:value| foldr (<|>) empty |]

gsparser_optional = [gs:value| λ 'p. parser.unit nothing <|> parser.map just p |]

gsmany = [gs:value| λ 'p. parser.unit nil <|> parser.map2 (:) p (many p) |]

gsmany1 = [gs:value| λ 'p. parser.map2 (:) p (many p) |]

gsparser_unary_or = [gs:value| λ 'p. p |]

gsparser_or = [gs:value| λ 'p0. λ 'p1. λ 'k. prim.<|> (p0 k) (p1 k) |]

$gsdeclare difference-w gsparser_difference_w

gsparser_notFollowedBy = [gs:value| λ 'p. λ 'k. difference-w (k 〈〉) (p prim.unit) |]

$gsdeclare prim.unit-plus gsprim_unit_plus
$gsdeclare prim.lookahead gsprim_lookahead

$gsdeclare difference1-w gsparser_difference1_w
$gsdeclare negate-w gsparser_negate_w

gsparser_difference_w = [gs:value| λ 'p0. λ 'p1. analyze p0.
    case prim.fail 'err 'exp. prim.fail err exp
    case prim.unit-plus 'x 'p01. prim.lookahead (negate-w p1 (prim.unit-plus x p01))
    case prim.get-pos 'k. get-pos (λ 'pos. difference-w (k pos) p1)
    case prim.lookahead 'pp0. prim.lookahead (difference-w pp0 p1)
    case prim.symbol-or-eof 'ek0 'sk0. (analyze p1.
        case prim.unit-plus _ _. prim.fail undefined undefined
        case prim.lookahead 'pp1. prim.lookahead (difference1-w p0 pp1)
        case prim.symbol-or-eof 'ek1 'sk1. prim.symbol-or-eof (difference-w ek0 ek1) (λ 'r. analyze sk0 r.
            case right 'p01. (analyze sk1 r.
                case left _. right p01
                case right 'p11. right (difference-w p01 p11)
            )
            case left 'err. left err
        )
    )
|]

gsparser_difference1_w = [gs:value| λ 'p0. λ 'pp1. analyze pp1.
    case prim.fail _ _. prim.unit-plus p0 (prim.fail nil nil)
    case prim.unit-plus 'p11 'pp11. difference1-w (difference-w p0 p11) pp11
    case prim.symbol-or-eof 'ek1 'sk1. prim.symbol-or-eof (difference1-w p0 ek1) (λ 'c. analyze sk1 c.
        case right 'pp11. right (difference1-w p0 pp11)
    )
|]

gsparser_negate_w = [gs:value| λ 'p. λ 'x. analyze p.
    case prim.unit-plus 'x 'p1. prim.empty
    case prim.symbol-or-eof 'ek 'sk. prim.symbol-or-eof undefined (λ 'c. analyze sk c.
        case left 'e. right (prim.unit x)
        case right 'p1. right (negate-w p1 x)
    )
|]

gsparser_getPos = $gslambda_value $ \ k -> $gsbcconstr (gsvar "get-pos") [ $gsav k ]

gsempty = [gs:value| λ 'k. prim.empty |]

gsprimunit = $gslambda_value $ \ x -> $gsbcconstr (gsvar "unit-plus") [ $gsav x, $gsav gsprim_empty ]

$gsdeclare prim.map gsprim_map

gsprimor = [gs:value| λ 'p0. λ 'p1. analyze p0.
    case prim.fail 'err0 'exp0. (analyze p1.
        case prim.fail 'err1 'exp1. prim.fail (err0 <> err1) (exp0 <> exp1)
        case prim.unit-plus 'x 'p11. prim.unit-plus x (prim.<|> p0 p11)
        case prim.get-pos 'k1. get-pos (λ 'pos. prim.<|> p0 (k1 pos))
        case prim.symbol-or-eof 'ek1 'sk1. prim.symbol-or-eof (prim.<|> p0 ek1) (λ 'c. analyze sk1 c.
            case left 'err1. left 〈 '0 ∝ err0 <> err1 #0; '1 ∝ exp0 <> err1 #1; 〉
            case right 'p11. right p11
        )
    )
    case prim.unit-plus 'x 'p01. prim.unit-plus x (prim.<|> p01 p1)
    case prim.get-pos 'k0. (analyze p1.
        case prim.fail _ _. get-pos (λ 'pos. prim.<|> (k0 pos) p1)
        case prim.unit-plus 'x 'p11. prim.unit-plus x (prim.<|> p0 p11)
        case prim.get-pos 'k1. get-pos (λ 'pos. prim.<|> (k0 pos) (k1 pos))
        case prim.symbol-or-eof 'ek1 'sk1. get-pos (λ 'pos. prim.<|> (k0 pos) (prim.symbol-or-eof ek1 sk1))
    )
    case prim.lookahead 'p01. (analyze p1.
        case prim.fail 'err1 'exp1. prim.lookahead (prim.map (λ 'p02. prim.<|> p02 p1) p01)
        case prim.unit-plus 'x 'p11. prim.unit-plus x (prim.<|> p0 p11)
        case prim.lookahead 'p11. prim.lookahead (prim.<|> p01 p11)
        case prim.symbol-or-eof 'ek1 'sk1. prim.lookahead (prim.<|> p01 (prim.unit (p1)))
    )
    case prim.symbol-or-eof 'ek0 'sk0. (analyze p1.
        case prim.fail 'err1 'exp1. prim.symbol-or-eof (prim.<|> ek0 p1) (λ 'c. analyze sk0 c.
            case left 'err0. left 〈 '0 ∝ err0 #0 <> err1; '1 ∝ err0 #1 <> exp1; 〉
            case right 'p01. right p01
        )
        case prim.unit-plus 'x 'p11. prim.unit-plus x (prim.<|> p0 p11)
        case prim.get-pos 'k1. get-pos (λ 'pos. prim.<|> p0 (k1 pos))
        case prim.lookahead 'pp1. prim.lookahead (prim.unit-plus p0 pp1)
        case prim.symbol-or-eof 'ek1 'sk1. prim.symbol-or-eof (prim.<|> ek0 ek1) (λ 'c. analyze sk0 c.
            case left 'e0. (analyze sk1 c.
                case left 'e1. left 〈 '0 ∝ undefined; '1 ∝ undefined; 〉
                case right 'p3. right p3
            )
            case right 'p2. (analyze sk1 c.
                case left 'e1. right p2
                case right 'p3. right (prim.<|> p2 p3)
            )
        )
    )
|]

gsprim_map = [gs:value| λ 'f. λ 'p. analyze p.
    case prim.fail 'err 'exp. prim.fail err exp
    case prim.unit-plus 'x 'p1. prim.unit-plus (f x) (prim.map f p1)
    case prim.symbol-or-eof 'ek0 'sk0. prim.symbol-or-eof (prim.map f ek0) (λ 'c. analyze sk0 c.
        case right 'p1. right (prim.map f p1)
    )
|]

gsprim_empty = [gs:value| prim.fail nil nil |]

gsprim_fail = $gslambda_value $ \ err -> $gsbcarg $ \ exp -> $gsbcconstr (gsvar "fail") [ $gsav err, $gsav exp ]
gsprim_unit_plus = $gslambda_value $ \ x -> $gsbcarg $ \ p -> $gsbcconstr (gsvar "unit-plus") [ $gsav x, $gsav p ]
gsprim_lookahead = $gslambda_value $ \ p -> $gsbcconstr (gsvar "lookahead") [ $gsav p ]
gsprim_symbol = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcconstr (gsvar "symbol-or-eof") [ $gsav ek, $gsav sk ]

gsprim_fail_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "fail" ek sk e
gsprim_unit_plus_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "unit-plus" ek sk e
gsprim_get_pos_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "get-pos" ek sk e
gsprim_lookahead_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "lookahead" ek sk e
gsprim_symbol_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "symbol-or-eof" ek sk e

gsparser_advanceRune = [gs:value| λ 'c. λ 'pos. analyze rune.≡ c r{\n}.
    case true. 〈 'filename ∝ pos #filename; 'line ∝ pos #line + 1; 'col ∝ 1; 〉
    case false. 〈 'filename ∝ pos #filename; 'line ∝ pos #line; 'col ∝ pos #col + 1; 〉
|]

gsparser_print_rune = [gs:value| λ 'c. qq{'§(c:nil)'} |]
