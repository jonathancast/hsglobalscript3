{-# LANGUAGE TemplateHaskell #-}
module GSI.Parser (gsparse, gsposFmt, gsparser_unary_or, gsempty, gsempty_view) where

import GSI.Syn (gsvar)
import GSI.Value (GSValue, gslambda, gsconstr, gsundefined_value, gsav, gsae)
import GSI.ByteCode (gsbcarg, gsbcenter, gsbcconstr, gsbcundefined, gsbcconstr_view)
$gsimports

gsparse = $gslambda $ \ p -> $gsbcarg $ \ pos -> $gsbcarg $ \ s ->
    [gs:expr hsvs=gsparsew,p,pos,s,| gsparsew (p undefined) pos s|]

gsparsew = $gslambda $ \ p -> $gsbcarg $ \ pos -> $gsbcarg $ \ s -> [gs:expr hsvs=p,pos,| analyze p.
    case empty. left (pos.fmt pos qq{empty})
|]

gsposFmt :: GSValue
gsposFmt = $gslambda $ \ pos -> $gsbcarg $ \ msg ->
    [gs:expr hsvs=pos,msg,| qq{ยง(pos #filename):ยง(fmtdecimal (pos #line)):ยง(fmtdecimal (pos #col)): ยง(msg)} |]

gsparser_unary_or = $gslambda $ \ p -> $gsbcenter p

gsempty = $gslambda $ \ k -> $gsbcconstr (gsvar "empty") []

gsempty_view :: GSValue
gsempty_view = $gslambda $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "empty" ek sk e
