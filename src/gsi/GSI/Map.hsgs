{-# LANGUAGE TemplateHaskell #-}
module GSI.Map (gsordered_map_insert, gsordered_map_get, gsordered_map_keys, gsordered_map_values, gsordered_map_union, gsordered_map_to_list, gsordered_map_empty) where

import GSI.Syn (gsvar)
import GSI.Value (gslambda_value, gsconstr, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)
$gsimports

$gsdeclare empty gsordered_map_empty
$gsdeclare branch gsordered_map_branch

$gsdeclare view empty gsordered_map_empty_view
$gsdeclare view branch gsordered_map_branch_view

gsordered_map_insert = [gs:value| λ 'cmp. λ 'k. λ 'v. λ 'm. analyze m.
    case empty. branch empty k v empty
    case branch 'l 'k1 'v1 'r. (analyze cmp k k1.
        case lt. branch (ordered-map.insert cmp k v l) k1 v1 r
        case eq. branch l k v r
        case gt. branch l k1 v1 (ordered-map.insert cmp k v r)
    )
|]

gsordered_map_get = [gs:value| λ 'cmp. λ 'k. λ 'm. analyze m.
    case empty. nothing
    case branch 'l 'k1 'v1 'r. (analyze cmp k k1.
        case lt. ordered-map.get cmp k l
        case eq. just v1
        case gt. ordered-map.get cmp k r
    )
|]

$gsdeclare split-lt gssplit_lt
$gsdeclare split-gt gssplit_gt

gsordered_map_union = [gs:value| λ 'cmp. λ 'm0. λ 'm1. analyze m0.
    case branch 'l0 'k0 'v0 'r0. (analyze m1.
        case branch 'l1 'k1 'v1 'r1. (analyze cmp k0 k1.
            case lt. branch
                (ordered-map.∪ cmp l0 (split-lt cmp k0 l1))
                k0 v0
                (branch
                    (ordered-map.∪ cmp (split-lt cmp k1 r0) (split-gt cmp k0 l1))
                    k1 v1
                    (ordered-map.∪ cmp (split-gt cmp k1 r0) r1)
                )
            case gt. branch
                (branch
                    (ordered-map.∪ cmp (split-lt cmp k1 l0) l1)
                    k1 v1
                    (ordered-map.∪ cmp (split-gt cmp k1 l0) (split-lt cmp k0 r1))
                )
                k0 v0
                (ordered-map.∪ cmp r0 (split-gt cmp k0 r1))
        )
    )
    case empty. m1
|]

gssplit_lt = [gs:value| λ 'cmp. λ 'k. λ 'm. analyze m.
    case empty. empty
    case branch 'l 'k1 'v1 'r. (analyze cmp k k1.
        case lt. split-lt cmp k l
        case gt. branch l k1 v1 (split-lt cmp k r)
    )
|]

gssplit_gt = [gs:value| λ 'cmp. λ 'k. λ 'm. analyze m.
    case empty. empty
    case branch 'l 'k1 'v1 'r. (analyze cmp k k1.
        case lt. branch (split-gt cmp k l) k1 v1 r
        case gt. split-gt cmp k r
    )
|]

gsordered_map_keys = [gs:value| λ 'm. analyze m.
    case branch 'l 'k _ 'r. ordered-map.keys l <> k : ordered-map.keys r
    case empty. nil
|]

gsordered_map_values = [gs:value| λ 'm. analyze m.
    case branch 'l _ 'v 'r. ordered-map.values l <> v : ordered-map.values r
    case empty. nil
|]

gsordered_map_to_list = [gs:value| λ 'm. analyze m.
    case branch 'l 'k 'v 'r. ordered-map.to-list l <> 〈 '0 ∝ k; '1 ∝ v; 〉 : ordered-map.to-list r
    case empty. nil
|]

$gsdeclare prim.empty gsordered_map_prim_empty
$gsdeclare prim.branch gsordered_map_prim_branch

$gsdeclare view prim.empty gsordered_map_prim_empty_view
$gsdeclare view prim.branch gsordered_map_prim_branch_view

gsordered_map_empty = [gs:value| prim.empty |]

$gsdeclare size gssize
$gsdeclare size.<=> gssize_compare

$gsdeclare balance-factor gsbalance_factor

$gsdeclare mkbranch gsmkbranch

-- Credit to §link{Implementing sets efficiently in a functional language}{https://groups.csail.mit.edu/mac/users/adams/BB/}
-- Need to produce §gs{l <> (k ⇒ v) @ r}
gsordered_map_branch = [gs:value| λ 'l. λ 'k. λ 'v. λ 'r. analyze size.<=> l r.
    case eq. mkbranch l k v r
     case lt. (analyze natural.< (size l + size r) 3 || natural.≤ (size r - 1) (size l * balance-factor).
         case false. (analyze r.
             case branch 'lr 'kr 'vr 'rr. branch (branch l k v lr) kr vr rr
         )
         case true. (analyze r.
             case branch 'lr 'kr 'vr 'rr. (analyze natural.< (size lr) (size rr).
                 case true. mkbranch (mkbranch l k v lr) kr vr rr
                 case false. (analyze lr.
                     case branch 'llr 'klr 'vlr 'rlr. mkbranch (mkbranch l k v llr) klr vlr (mkbranch rlr kr vr rr)
                 )
             )
         )
     )
    case gt. (analyze natural.< (size l + size r) 3 || natural.≤ (size l - 1) (size r * balance-factor).
        case false. (analyze l.
            case branch 'll 'kl 'vl 'rl. branch ll kl vl (branch rl k v r)
        )
        case true. (analyze l.
            case branch 'll 'kl 'vl 'rl. (analyze natural.< (size rl) (size ll).
                case true. mkbranch ll kl vl (mkbranch rl k v r)
                case false. (analyze rl.
                    case branch 'lrl 'krl 'vrl 'rrl. mkbranch (mkbranch ll kl vl lrl) krl vrl (mkbranch rrl k v r)
                )
            )
        )
     )
|]

-- We have:
-- §gs{size l > size r * balance-factor}
-- §gs{l} is too big
-- §gs{l} is one too big means
-- §gs{size l - 1 ≤ size r * balance-factor}
-- §gs{r} is one too small means
-- §gs{size l ≤ (size r + 1) * balance-factor}
-- §gs{size l ≤ size r * balance-factor + balance-factor}
-- §gs{size l - balance-factor ≤ size r * balance-factor}
-- Now, §gs{balance-factor ≥ 1} so §gs{size l - balance-factor ≤ size l - 1}
-- So we always have §gs{size l - 1 ≤ size r * balance-factor} if we're within one step of being balanced

gsmkbranch = [gs:value| λ 'l. λ 'k. λ 'v. λ 'r. prim.branch !(size l + size r + 1) l k v r |]

gssize = [gs:value| λ 'm. analyze m.
    case prim.branch 's _ _ _ _. s
    case prim.empty. 0
|]

gssize_compare = [gs:value| λ 'l. λ 'r. analyze natural.< (size l + size r) 2.
    case true. eq
    case false. (analyze natural.< (size l * balance-factor) (size r).
        case true. lt
        case false. (analyze natural.> (size l) (size r * balance-factor).
            case true. gt
            case false. eq
        )
    )
|]

gsbalance_factor = [gs:value| 4 |]

gsordered_map_empty_view = gsordered_map_prim_empty_view
gsordered_map_branch_view = [gs:value| λ 'ek. λ 'sk. λ 'm. analyze m.
    case prim.branch _ 'l 'k 'v 'r. sk l k v r
    case prim.empty. ek
|]

gsordered_map_prim_empty = $gsconstr (gsvar "empty") []
gsordered_map_prim_branch = $gslambda_value $ \ d -> $gsbcarg $ \ l -> $gsbcarg $ \ k -> $gsbcarg $ \ v -> $gsbcarg $ \ r -> $gsbcconstr (gsvar "branch") [ $gsav d, $gsav l, $gsav k, $gsav v, $gsav r ]

gsordered_map_prim_empty_view = $gsbcconstr_view "empty"
gsordered_map_prim_branch_view = $gsbcconstr_view "branch"
