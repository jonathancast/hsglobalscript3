{-# LANGUAGE TemplateHaskell #-}
module GSI.Main (gsmain) where

import GSI.Value (gslambda, gsav)
import GSI.ByteCode (gsbcimpfor, gsbcimpbind)
import GSI.Env (gsenvGetArgs)
$gsimports

-- Main function (call this to start your interpreter)
gsmain = $gslambda $ \ gsrun -> $gsbcimpfor $ do
    args <- $gsbcimpbind $ $gsav gsenvGetArgs
    [gs:body hsvs=gsprocessargs,args,| gsprocessargs args |]

-- Loops over arguments to process them
gsprocessargs = $gslambda $ \ args -> [gs:expr hsvs=gsprocessargs,args,| analyze args.
    case 'a : 'as. impfor 'mbst ← file.stat a;. analyze mbst.
        case left 'e. (analyze e.
            case ENOENT 'fn.
                impfor
                    _ ← print-error qq{§(a): Could not load: no such file or directory\n};
                  . error log{Process §(gsv a) (§(gsv e)) next}
        )
        case right 'st.
            gsprocessargs as -- Ignore all arguments until we start failing tests for it
|]
