{-# LANGUAGE TemplateHaskell #-}
module GSI.Main (gsmain) where

$gsimports

$gsdeclare gsprocessargs gsprocessargs

-- Main function (call this to start your interpreter)
gsmain = [gs:value| λ 'gstyc. λ 'gsrun. λ 'args. gsprocessargs args gstyc gsrun |]

$gsdeclare process-document gsprocess_document
$gsdeclare compiler.global-env gscompiler_global_env

-- Loops over arguments to process them
gsprocessargs = [gs:value| λ 'args. λ 'gstyc. λ 'gsrun. analyze args.
    case 'a : 'as. impanalyzeM file.stat a.
        case left 'e. (analyze e.
            case ENOENT 'fn.
                impfor _ ← print-error qq{§(a): Could not load: no such file or directory\n};. abend qq{no-such-file}
        )
        case right 'st. (analyze st #is.dir.
            case true. gsprocessargs as gstyc gsrun -- Ignore all arguments until we start failing tests for it
            case false. impfor 's ← file.read a;. analyze parse advance-rune print-rune (file parser.global-env) (pos.init a) s.
                case left 'err. impfor _ ← print-error qq{§(err)\n};. abend qq{parse-error}
                case right 'd. (analyze d.
                    case file.document 'pos 'd. (analyze process-document pos gstyc d.
                        case left 'err. impfor _ ← print-error qq{§(err)\n};. abend qq{compilation-error}
                        case right 'dty. impfor 'prog ← gsthunk pos (compile-document pos compiler.global-env dty);.
                            gsrun prog as
                    )
                )
        )
|]

gsload_document = [gs:value| λ 'fn. λ 'gstyc. λ 'k. impanalyzeM gsio.file.read fn.
    case right 's. (analyze parse advance-rune print-rune (file parser.global-env) (pos.init fn) s.
        case right 'f. (analyze f.
            case file.document 'pos 'd. (analyze process-document pos gstyc d.
            )
        )
    )
|]

$gsdeclare validator.global-env gsvalidator_global_env

gsprocess_document = [gs:value| λ 'pos. λ 'gstyc. λ 'd.
    either.for
            'dspec ← right (annotate-document annotator.global-env d);
            'di ← right (add-implicits-document implicits.global-env dspec);
            _ ← validate-document pos validator.global-env dspec;
            'dty ← type-checker.run (type-check-document pos gstyc di) type-checker.global-env;
        . right dty
|]

gsvalidator_global_env = [gs:value|
    foldr (λ 'v. λ 'env. validator.env.in-scope.insert v env)
        validator.env.empty
        (type.env.vars type-checker.global-env)
|]

$gsdeclare load-document gsload_document

gscompiler_global_env = [gs:value|
    compiler.env.constr.insert (gsvar qq{error}) $
    compiler.env.constr.insert (gsvar qq{undefined}) $
    compiler.env.constr.insert (gsvar qq{λ}) $
    compiler.env.value.insert (gsvar qq{+}) (gsinject addition.+) $
    compiler.env.value.insert (gsvar qq{>>=}) (gsinject monad.>>=) $
    compiler.env.value.insert (gsvar qq{@}) (gsinject (:)) $
    compiler.env.value.insert (gsvar qq{advance-rune}) (gsinject advance-rune) $
    compiler.env.value.insert (gsvar qq{analyzeM}) (gsinject (value analyzeM)) $
    compiler.env.value.insert (gsvar qq{analyze}) (gsinject (value analyze)) $
    compiler.env.value.insert (gsvar qq{annotate-document}) (gsinject annotate-document) $
    compiler.env.value.insert (gsvar qq{annotator.global-env}) (gsinject annotator.global-env) $
    compiler.env.value.insert (gsvar qq{case}) (gsinject (value case)) $
    compiler.env.value.insert (gsvar qq{create-thread}) (gsinject create-thread) $
    compiler.env.value.insert (gsvar qq{exec-main-thread}) (gsinject exec-main-thread) $
    compiler.env.value.insert (gsvar qq{file}) (gsinject file) $
    compiler.env.value.insert (gsvar qq{gsapply}) (gsinject gsapply) $
    compiler.env.value.insert (gsvar qq{gsi.monad}) (gsinject gsi.monad) $
    compiler.env.value.insert (gsvar qq{gsinject}) (gsinject gsinject) $
    compiler.env.value.insert (gsvar qq{gsio.file.read}) (gsinject gsio.file.read) $
    compiler.env.value.insert (gsvar qq{gsio.monad}) (gsinject gsio.monad) $
    compiler.env.value.insert (gsvar qq{gsmain}) (gsinject gsmain) $
    compiler.env.value.insert (gsvar qq{gsvar}) (gsinject gsvar) $
    compiler.env.value.insert (gsvar qq{just}) (gsinject just) $
    compiler.env.value.insert (gsvar qq{load-document}) (gsinject load-document) $
    compiler.env.value.insert (gsvar qq{mapM0}) (gsinject mapM0) $
    compiler.env.value.insert (gsvar qq{map}) (gsinject map) $
    compiler.env.value.insert (gsvar qq{natural.addition}) (gsinject natural.addition) $
    compiler.env.value.insert (gsvar qq{nil}) (gsinject nil) $
    compiler.env.value.insert (gsvar qq{parser.global-env}) (gsinject parser.global-env) $
    compiler.env.value.insert (gsvar qq{parse}) (gsinject parse) $
    compiler.env.value.insert (gsvar qq{pos.init}) (gsinject pos.init) $
    compiler.env.value.insert (gsvar qq{print-rune}) (gsinject print-rune) $
    compiler.env.value.insert (gsvar qq{process-document}) (gsinject process-document) $
    compiler.env.value.insert (gsvar qq{true}) (gsinject true) $
    compiler.env.value.insert (gsvar qq{type-check-document}) (gsinject type-check-document) $
    compiler.env.value.insert (gsvar qq{type-checker.global-env}) (gsinject type-checker.global-env) $
    compiler.env.value.insert (gsvar qq{type-checker.run}) (gsinject type-checker.run) $
    compiler.env.value.insert (gsvar qq{type-checker.unify}) (gsinject type-checker.unify) $
    compiler.env.value.insert (gsvar qq{type-checker.unit}) (gsinject type-checker.unit) $
    compiler.env.value.insert (gsvar qq{type.app}) (gsinject type.app) $
    compiler.env.value.insert (gsvar qq{type.consts}) (gsinject type.consts) $
    compiler.env.value.insert (gsvar qq{type.const}) (gsinject type.const) $
    compiler.env.value.insert (gsvar qq{type.empty-signature}) (gsinject type.empty-signature) $
    compiler.env.value.insert (gsvar qq{type.function}) (gsinject type.function) $
    compiler.env.value.insert (gsvar qq{undefined}) (gsinject (value undefined)) $
    compiler.env.value.insert (gsvar qq{validate-document}) (gsinject validate-document) $
    compiler.env.value.insert (gsvar qq{validator.global-env}) (gsinject validator.global-env) $
    compiler.env.value.insert (gsvar qq{λ}) (gsinject (value λ)) $
    compiler.env.value.insert (gsvar qq{∘}) (gsinject (∘)) $
    compiler.env.view.insert (gsvar qq{false}) (gsinject (view false)) $
    compiler.env.view.insert (gsvar qq{file.document}) (gsinject (view file.document)) $
    compiler.env.view.insert (gsvar qq{just}) (gsinject (view just)) $
    compiler.env.view.insert (gsvar qq{nothing}) (gsinject (view nothing)) $
    compiler.env.view.insert (gsvar qq{right}) (gsinject (view right)) $
    compiler.env.view.insert (gsvar qq{true}) (gsinject (view true)) $
    compiler.env.empty
|]
