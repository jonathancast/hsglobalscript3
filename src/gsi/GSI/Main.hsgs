{-# LANGUAGE TemplateHaskell #-}
module GSI.Main (gsmain) where

import GSI.Syn (gsvar)
import GSI.Value (gslambda_value, gsconstr, gsundefined_value, gsav)
import GSI.ByteCode (gsbcarg, gsbcrecord, gsbcconstr, gsbcundefined, gsbcconstr_view)
$gsimports

-- Main function (call this to start your interpreter)
gsmain = $gslambda_value $ \ gstyc -> $gsbcarg $ \ gsrun -> [gs:expr hsvs=gsprocessargs,gstyc,gsrun,| impfor
        'args ← env.get-args;
    . gsprocessargs args gstyc gsrun
|]

$gsdeclare process-document gsprocessDocument

-- Loops over arguments to process them
gsprocessargs = $gslambda_value $ \ args -> $gsbcarg $ \ gstyc -> $gsbcarg $ \ gsrun -> [gs:expr hsvs=gsprocessargs,gstyc,gsrun,args,file,gspos,| analyze args.
    case 'a : 'as. analyze-impM file.stat a.
        case left 'e. (analyze e.
            case ENOENT 'fn.
                impfor
                    _ ← print-error qq{§(a): Could not load: no such file or directory\n};
                  . error log{Process §(gsv a) (§(gsv e)) next}
        )
        case right 'st. (analyze st #is.dir.
            case true. gsprocessargs as gstyc gsrun -- Ignore all arguments until we start failing tests for it
            case false. impfor 's ← file.read a;. (analyze parse advance-rune file (gspos a 1 1) s.
                case left 'err. impfor
                    _ ← print-error qq{§(err)\n};
                  . error log{§(gsv a): process §(gsv err) next}
                case right 'd. (analyze d.
                    case file.document 'pos 'mb. (analyze process-document pos gstyc mb.
                        case right 'prog. gsrun prog as
                    )
                )
            )
        )
|]

$gsdeclare pragmas pragmas;
$gsdeclare expr expr;

file = [gs:value|
    <|> parser-for
            _ ← pragmas;
            'pos ← get-pos;
            'mb ← optional expr;
        . parser.unit (file.document pos mb)
|]

pragmas = [gs:value hsvs=pragmawhitespace,| pragmawhitespace *> many empty |]

pragmawhitespace = [gs:value| many (
    <|> (
        *> string qq{#!}
        *> many (matching log{comment body character} (λ 'c. c ≠ r{\n}))
        *> char r{\n}
        *> parser.unit 〈〉
    )
    <|> (
        *> string qq{\n}
        *> parser.unit 〈〉
    )
) |]

$gsdeclare ident ident

expr = [gs:value|
    <|> parser.map undefined ident
|]

$gsdeclare lexeme lexeme

$gsdeclare ident-start-char identStartChar
$gsdeclare ident-cont-char identContChar

ident = [gs:value|
    lexeme (parser.map2 undefined ident-start-char (many ident-cont-char) <* not-followed-by ident-cont-char)
|]

identStartChar = [gs:value| matching log{ident start character} is-lower |]
identContChar = [gs:value| matching log{ident cont character} is-lower |]

$gsdeclare whitespace whitespace

lexeme = [gs:value| λ 'p. p <* whitespace |]

whitespace = [gs:value| many (matching log{whitespace} is-space) |]

$gsdeclare type-check-document gstypeCheckDocument

gsprocessDocument = [gs:value| λ 'pos. λ 'gstyc. λ 'mbe.
    either-for
        _ ← type-check-document pos gstyc;
        'p ← compile-document pos;
    . right p
|]

gstypeCheckDocument = [gs:value| λ 'pos. λ 'gstyc. right undefined |]

gstype_checker_for = [gs:value| λ 'gens. λ 'a. type-checker.>>= gens a |]

gstype_checker_unit = [gs:value| undefined |]

gstype_checker_bind = [gs:value| λ 'a. λ 'k. analyze-impM a.
|]

gscompileDocument = $gslambda_value $ \ pos -> [gs:expr hsvs=pos,| right (gsundefined pos) |]

gsfileDocument = $gslambda_value $ \ pos -> $gsbcarg $ \ mb -> $gsbcconstr (gsvar "document") [ $gsav pos, $gsav mb ]

gsfileDocument_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "document" ek sk e

gspos = $gslambda_value $ \ fn -> $gsbcarg $ \ l -> $gsbcarg $ \ c -> $gsbcrecord [
    (gsvar "filename", $gsav fn),
    (gsvar "line", $gsav l),
    (gsvar "col", $gsav c)
  ]
