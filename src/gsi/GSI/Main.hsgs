{-# LANGUAGE TemplateHaskell #-}
module GSI.Main (gsmain) where

$gsimports

$gsdeclare gsprocessargs gsprocessargs

-- Main function (call this to start your interpreter)
gsmain = [gs:value| λ 'gstyc. λ 'gsrun. λ 'args. gsprocessargs args gstyc gsrun |]

$gsdeclare parser.global-env gsparser_global_env
$gsdeclare process-document gsprocess_document

-- Loops over arguments to process them
gsprocessargs = [gs:value| λ 'args. λ 'gstyc. λ 'gsrun. analyze args.
    case 'a : 'as. analyze-impM file.stat a.
        case left 'e. (analyze e.
            case ENOENT 'fn.
                impfor
                    _ ← print-error qq{§(a): Could not load: no such file or directory\n};
                  . error log{Process §(gsv a) (§(gsv e)) next}
        )
        case right 'st. (analyze st #is.dir.
            case true. gsprocessargs as gstyc gsrun -- Ignore all arguments until we start failing tests for it
            case false. impfor 's ← file.read a;. analyze parse advance-rune print-rune (file parser.global-env) (pos.init a) s.
                case left 'err. impfor _ ← print-error qq{§(err)\n};. error log{§(gsv a): process §(gsv err) next}
                case right 'd. (analyze d.
                    case file.document 'pos 'd. (analyze process-document pos gstyc d.
                        case left 'err. impfor
                                _ ← print-error qq{§(err)\n};
                            . error log{Errors next}
                        case right 'prog. impfor 'progv ← gsthunk pos prog;. gsrun progv as
                    )
                )
        )
|]

$gsdeclare annotator.global-env gsannotator_global_env
$gsdeclare validator.global-env gsvalidator_global_env
$gsdeclare type-checker.global-env gstype_checker_global_env
$gsdeclare compiler.global-env gscompiler_global_env

gsprocess_document = [gs:value| λ 'pos. λ 'gstyc. λ 'd.
    either.for
            'dspec ← right (annotate-document annotator.global-env pos d);
            _ ← validate-document pos validator.global-env dspec;
            'dty ← type-checker.run (type-check-document pos gstyc dspec) type-checker.global-env;
        . right (compile-document pos compiler.global-env dty)
|]

$gsdeclare type.consts gstype_consts

gsparser_global_env = [gs:value|
    parser.env.else.insert (gsvar qq{case}) 〈〉 $
    parser.env.missing-body.insert (gsvar qq{analyzeM}) expr.missing-case $
    parser.env.missing-body.insert (gsvar qq{analyze}) expr.missing-case $
    parser.env.missing-else.insert (gsvar qq{case}) expr.missing-case $
    parser.env.qlo.insert (gsvar qq{qq}) 〈
        'parse ∝ λ 'env. many symbol;
        'annotate ∝ λ 'env. λ 'pos. λ 'qs. map (annotate-qloitem env pos) qs;
        'validate ∝ λ 'env. λ 'pos. λ 'qs. either.for _ ← either.mapM (validate-qloitem env pos) qs;. right 〈〉;
        'type-check ∝ λ 'pos. λ 'qs. λ 'tye. type-checker.for
                _ ← type-checker.unify pos (type.app (type.consts qq{list.t}) (type.consts qq{rune.t})) tye;
                'qsa ← type-checker.mapM
                    (λ 'qi. analyze qi.
                        case qloitem.char 'ch. type-checker.unit (qloitem.char ch)
                    )
                    qs
                ;
            . type-checker.unit qsa
        ;
        'compile ∝ λ 'pos. λ 'env. λ 'qs. foldr
            (λ 'qi. λ 's. analyze qi.
                case qloitem.char 'ch. gsbcapply pos (gsinject (:)) (gsav (gsinject ch) : gsae pos s : nil)
            )
            (gsbcenter pos (gsinject nil))
            qs
        ;
    〉 $
    parser.env.signature.insert (gsvar qq{case}) (order-of-being.pattern : order-of-being.open-expr : nil) $
    parser.env.signature.insert (gsvar qq{λ}) (order-of-being.pattern : order-of-being.open-expr : nil) $
    parser.env.syntactic-category.insert (gsvar qq{analyzeM}) syntactic-category.lambda-like $
    parser.env.syntactic-category.insert (gsvar qq{analyze}) syntactic-category.lambda-like $
    parser.env.syntactic-category.insert (gsvar qq{case}) syntactic-category.lambda-like $
    parser.env.syntactic-category.insert (gsvar qq{where}) syntactic-category.where $
    parser.env.syntactic-category.insert (gsvar qq{λ}) syntactic-category.lambda-like $
    parser.env.empty
|]

gsannotator_global_env = [gs:value|
    annotator.env.namespace.insert (gsvar qq{λ}) (λ 'as. analyze as.
        case (arg.expr _ (expr.pat 'p0 _)):((arg.expr _ (expr.open-expr 'e1 _)):_). just (pat.bound-vars p0) : just (pat.bound-vars p0) : nil
    ) $
    annotator.env.namespace.insert (gsvar qq{case}) (λ 'as. analyze as.
        case (arg.expr _ (expr.pat 'p0 _)):((arg.expr _ (expr.open-expr 'e1 _)):_). just (pat.bound-vars p0) : just (pat.bound-vars p0) : nil
    ) $
    annotator.env.category.insert (gsvar qq{case}) (λ 'as. analyze as.
        case (arg.expr _ (expr.pat 'p0 _)):_. just category.monoidal : nil
    ) $
    annotator.env.empty
|]

gsvalidator_global_env = [gs:value|
    validator.env.in-scope.insert (gsvar qq{analyze}) $
    validator.env.in-scope.insert (gsvar qq{case}) $
    validator.env.in-scope.insert (gsvar qq{gsmain}) $
    validator.env.in-scope.insert (gsvar qq{type-checker.unit}) $
    validator.env.in-scope.insert (gsvar qq{undefined}) $
    validator.env.in-scope.insert (gsvar qq{λ}) $
    validator.env.empty
|]

$gsdeclare type.pattern gstype_pattern
$gsdeclare type.pattern.monoidal gstype_pattern_monoidal
$gsdeclare type.generator gstype_generator
$gsdeclare type.generator.monoidal gstype_generator_monoidal
$gsdeclare type.open-expr gstype_open_expr

$gsdeclare type.addition gstype_addition

$gsdeclare type.monad gstype_monad

$gsdeclare type-checker.gstyc.type gstype_checker_gstyc_type
$gsdeclare type-checker.gsrun.type gstype_checker_gsrun_type
$gsdeclare type-checker.args.type gstype_checker_args_type

gstype_checker_global_env = [gs:value|
    type.env.type.insert (gsvar qq{analyze}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.consts qq{α}) $
                type.function (type.function (type.consts qq{α}) (type.consts qq{β})) $
                    type.consts qq{β}
    ) $
    type.env.type.insert (gsvar qq{case}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{σ}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.pattern.monoidal (type.consts qq{α}) (type.consts qq{σ})) $
                type.function (type.open-expr (type.consts qq{σ}) (type.consts qq{β})) $
                    type.function (type.function (type.consts qq{α}) (type.consts qq{β})) $
                        type.function (type.consts qq{α}) (type.consts qq{β})
    ) $
    type.env.type.insert (gsvar qq{λ}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $ type.forall (gsvar qq{σ}) kind.pointed $
            type.function (type.pattern (type.consts qq{α}) (type.consts qq{σ})) $
                type.function (type.open-expr (type.consts qq{σ}) (type.consts qq{β})) $
                    type.function (type.consts qq{α}) (type.consts qq{β})
    ) $
    type.env.type.insert (gsvar qq{gsvar}) (
        type.function (type.app (type.consts qq{list.t}) (type.consts qq{rune.t})) $ type.consts qq{gsvar.t}
    ) $
    type.env.type.insert (gsvar qq{gsmain}) (
        type.function type-checker.gstyc.type $
            type.function type-checker.gsrun.type $
                type.function (type.app (type.consts qq{list.t}) $ type.app (type.consts qq{list.t}) $ type.consts qq{rune.t}) $
                    type.app (type.consts qq{gsi.m}) type.empty-signature
    ) $
    type.env.type.insert (gsvar qq{gsapply}) (
        type.function (type.consts qq{gsvalue.t}) $
            type.function (type.app (type.consts qq{list.t}) $ type.consts qq{gsvalue.t}) $
                type.app (type.consts qq{gsi.m}) (type.consts qq{gsvalue.t})
    ) $
    type.env.type.insert (gsvar qq{gsinject}) (type.forall (gsvar qq{α}) kind.pointed $
        type.function (type.consts qq{α}) (type.consts qq{gsvalue.t})
    ) $
    type.env.type.insert (gsvar qq{annotate-document}) (
        type.function (type.consts qq{gsdl.annotator.env.t}) $
            type.function (type.consts qq{pos.t}) $
                type.function (type.consts qq{gsdl.document.t}) $
                    type.consts qq{gsdl.document.t}
    ) $
    type.env.type.insert (gsvar qq{annotator.global-env}) (type.consts qq{gsdl.annotator.env.t}) $
    type.env.type.insert (gsvar qq{type.function}) (
        type.function (type.consts qq{type.t}) $ type.function (type.consts qq{type.t}) $ type.consts qq{type.t}
    ) $
    type.env.type.insert (gsvar qq{type.app}) (
        type.function (type.consts qq{type.t}) $ type.function (type.consts qq{type.t}) $ type.consts qq{type.t}
    ) $
    type.env.type.insert (gsvar qq{type.const}) (
        type.function (type.consts qq{gsvar.t}) $ type.consts qq{type.t}
    ) $
    type.env.type.insert (gsvar qq{type.consts}) (
        type.function (type.app (type.consts qq{list.t}) (type.consts qq{rune.t})) $ type.consts qq{type.t}
    ) $
    type.env.type.insert (gsvar qq{type.empty-signature}) (type.consts qq{type.t}) $
    type.env.type.insert (gsvar qq{type-checker.unify}) (
        type.function (type.consts qq{pos.t}) $
            type.function (type.consts qq{type.t}) $ type.function (type.consts qq{type.t}) $
                type.app (type.const (gsvar qq{type-checker.m})) type.empty-signature
    ) $
    type.env.type.insert (gsvar qq{type-checker.unit}) (
        type.forall (gsvar qq{α}) kind.pointed $
            type.function (type.consts qq{α}) $ type.app (type.consts qq{type-checker.m}) (type.consts qq{α})
    ) $
    type.env.type.insert (gsvar qq{map}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.function (type.consts qq{α}) (type.consts qq{β})) $
                type.function (type.app (type.consts qq{list.t}) (type.consts qq{α})) (type.app (type.consts qq{list.t}) (type.consts qq{β}))
    ) $
    type.env.type.insert (gsvar qq{true}) (type.consts qq{bool.t}) $
    type.env.type.insert (gsvar qq{+}) (type.forall (gsvar qq{α}) kind.pointed $
        type.function (type.addition (type.consts qq{α})) $
            type.function (type.consts qq{α}) $ type.function (type.consts qq{α}) $ type.consts qq{α}
    ) $
    type.env.type.insert (gsvar qq{natural.addition}) (type.addition (type.consts qq{natural.t})) $
    type.env.type.insert (gsvar qq{@}) (type.forall (gsvar qq{α}) kind.pointed $
        type.function (type.consts qq{α}) $ type.function (type.app (type.consts qq{list.t}) (type.consts qq{α})) $
            type.app (type.consts qq{list.t}) (type.consts qq{α})
    ) $
    type.env.type.insert (gsvar qq{nil}) (type.forall (gsvar qq{α}) kind.pointed $
        type.app (type.consts qq{list.t}) (type.consts qq{α})
    ) $
    type.env.view-type.insert (gsvar qq{true}) (type.consts qq{bool.t}) $
    type.env.view-type.insert (gsvar qq{false}) (type.consts qq{bool.t}) $
    type.env.type.insert (gsvar qq{just}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.function (type.consts qq{α}) $
            type.app (type.consts qq{maybe.t}) (type.consts qq{α})
    ) $
    type.env.view-type.insert (gsvar qq{just}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.function (type.consts qq{α}) $
            type.app (type.consts qq{maybe.t}) (type.consts qq{α})
    ) $
    type.env.view-type.insert (gsvar qq{nothing}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.app (type.consts qq{maybe.t}) (type.consts qq{α})
    ) $
    type.env.view-type.insert (gsvar qq{right}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.consts qq{β}) $
                type.apply (type.consts qq{either.t}) (type.consts qq{α} : type.consts qq{β} : nil)
    ) $
    type.env.type.insert (gsvar qq{undefined}) (
        type.forall (gsvar qq{α}) kind.pointed $
            type.function (type.const (gsvar qq{stack-trace.t})) $ type.const (gsvar qq{α})
    ) $
    type.env.implicits.insert (gsvar qq{undefined}) (implicit.here : nil) $
    type.env.type.insert (gsvar qq{∘}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $ type.forall (gsvar qq{γ}) kind.pointed $
            type.function (type.function (type.consts qq{β}) (type.consts qq{γ})) $
                type.function (type.function (type.consts qq{α}) (type.consts qq{β})) $
                    type.function (type.consts qq{α}) (type.consts qq{γ})
    ) $
    type.env.view-type.insert (gsvar qq{gsvalue.thunk}) (
        type.function (type.consts qq{gsvalue.thunk.t}) $ type.consts qq{gsvalue.t}
    ) $
    type.env.type.insert (gsvar qq{create-thread}) (
        type.function (type.consts qq{gsvalue.t}) $ type.app (type.consts qq{gsi.m}) (type.consts qq{gsi.thread.t})
    ) $
    type.env.type.insert (gsvar qq{exec-main-thread}) (
        type.function (type.consts qq{gsi.thread.t}) $ type.app (type.consts qq{gsi.m}) type.empty-signature
    ) $
    type.env.type.insert (gsvar qq{>>=}) (
        type.forall (gsvar qq{m}) kind.pointed $ type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.monad (type.consts qq{m})) $
                type.function (type.app (type.consts qq{m}) (type.consts qq{α})) $
                    type.function (type.function (type.consts qq{α}) (type.app (type.consts qq{m}) (type.consts qq{β}))) $
                        type.app (type.consts qq{m}) (type.consts qq{β})
    ) $
    type.env.type.insert (gsvar qq{mapM0}) (
        type.forall (gsvar qq{m}) kind.pointed $ type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.monad (type.consts qq{m})) $
                type.function (type.function (type.consts qq{α}) (type.app (type.consts qq{m}) (type.consts qq{β}))) $
                    type.function (type.app (type.consts qq{list.t}) (type.consts qq{α})) $
                        type.app (type.consts qq{m}) type.empty-signature
    ) $
    type.env.type.insert (gsvar qq{analyzeM}) (
        type.forall (gsvar qq{m}) kind.pointed $ type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.monad (type.consts qq{m})) $
                type.function (type.app (type.consts qq{m}) (type.consts qq{α})) $
                    type.function (type.function (type.consts qq{α}) (type.app (type.consts qq{m}) (type.consts qq{β}))) $
                        type.app (type.consts qq{m}) (type.consts qq{β})
    ) $
    type.env.type.insert (gsvar qq{gsi.monad}) (type.monad (type.consts qq{gsi.m})) $
    type.env.type.insert (gsvar qq{gsio.monad}) (type.monad (type.consts qq{gsio.m})) $
    type.env.type.insert (gsvar qq{gsio.file.read}) (
        type.function (type.app (type.consts qq{list.t}) (type.consts qq{rune.t})) $
            type.app (type.consts qq{gsio.m}) $
                type.apply (type.consts qq{either.t}) (type.consts qq{file.error.t} : type.app (type.consts qq{list.t}) (type.consts qq{rune.t}) : nil)
    ) $
    type.env.type.insert (gsvar qq{parse}) (
        type.forall (gsvar qq{s}) kind.pointed $ type.forall (gsvar qq{α}) kind.pointed $
            type.function (type.function (type.consts qq{s}) $ type.function (type.consts qq{pos.t}) $ type.consts qq{pos.t}) $
                type.function (type.function (type.consts qq{s}) $ type.app (type.consts qq{list.t}) (type.consts qq{rune.t})) $
                    type.function (type.apply (type.consts qq{parser.t}) (type.consts qq{s} : type.consts qq{α} : nil)) $
                        type.function (type.consts qq{pos.t}) $
                            type.function (type.app (type.consts qq{list.t}) (type.consts qq{s})) $
                                type.apply (type.consts qq{either.t}) (type.consts qq{parser.error.t} : type.consts qq{α} : nil)
    ) $
    type.env.type.insert (gsvar qq{pos.init}) (
        type.function (type.app (type.consts qq{list.t}) (type.consts qq{rune.t})) $ type.consts qq{pos.t}
    ) $
    type.env.type.insert (gsvar qq{advance-rune}) (
        type.function (type.consts qq{rune.t}) $ type.function (type.consts qq{pos.t}) $ type.consts qq{pos.t}
    ) $
    type.env.type.insert (gsvar qq{print-rune}) (
        type.function (type.consts qq{rune.t}) $ type.app (type.consts qq{list.t}) (type.consts qq{rune.t})
    ) $
    type.env.type.insert (gsvar qq{parser.global-env}) (type.consts qq{gsdl.parser.env.t}) $
    type.env.type.insert (gsvar qq{file}) (
        type.function (type.consts qq{gsdl.parser.env.t}) $
            type.apply (type.consts qq{parser.t}) (type.consts qq{rune.t} : type.consts qq{gsdl.file.t} : nil)
    ) $
    type.env.empty
|]

gstype_checker_gstyc_type = [gs:value|
    type.function (type.const (gsvar qq{pos.t})) $
        type.function (type.const (gsvar qq{type.t})) $
            type.app (type.const (gsvar qq{type-checker.m})) type.empty-signature
|]

gstype_checker_gsrun_type = [gs:value|
    type.function (type.const (gsvar qq{gsvalue.t})) $
        type.function type-checker.args.type $
            type.app (type.const (gsvar qq{gsi.m})) type.empty-signature
|]

gstype_checker_args_type = [gs:value|
    type.app (type.const (gsvar qq{list.t})) $ type.app (type.const (gsvar qq{list.t})) $ type.const (gsvar qq{rune.t})
|]

gstype_pattern = [gs:value| λ 'α. λ 'σ. type.function α $ type.generator σ |]
gstype_pattern_monoidal = [gs:value| λ 'α. λ 'σ. type.function α $ type.generator.monoidal σ |]
gstype_generator = [gs:value| λ 'σ. σ |]
gstype_generator_monoidal = [gs:value| λ 'σ. type.app (type.consts qq{generator.monoidal.t}) σ |]
gstype_open_expr = [gs:value| λ 'σ. λ 'α. type.function σ α |]

gstype_addition = [gs:value| λ 'α. type.signature (
    type.env.type.insert (gsvar qq{0}) α (
    type.env.type.insert (gsvar qq{+}) (type.function α $ type.function α $ α) 
    type.env.empty))
|]

gstype_monad = [gs:value| λ 'm. type.signature $
    type.env.type.insert (gsvar qq{unit}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.function (type.consts qq{α}) $ type.app m (type.consts qq{α})
    ) $
    type.env.type.insert (gsvar qq{>>=}) (
        type.forall (gsvar qq{α}) kind.pointed $ type.forall (gsvar qq{β}) kind.pointed $
            type.function (type.app m (type.consts qq{α})) $
                type.function (type.function (type.consts qq{α}) (type.app m (type.consts qq{β}))) $
                    type.app m (type.consts qq{β})
    ) $
    type.env.empty
|]

gstype_consts = [gs:value| λ 's. type.const (gsvar s) |]

gscompiler_global_env = [gs:value|
    compiler.env.value.insert (gsvar qq{+}) (gsinject addition.+) $
    compiler.env.value.insert (gsvar qq{>>=}) (gsinject monad.>>=) $
    compiler.env.value.insert (gsvar qq{@}) (gsinject (:)) $
    compiler.env.value.insert (gsvar qq{advance-rune}) (gsinject advance-rune) $
    compiler.env.value.insert (gsvar qq{analyzeM}) (gsinject (value analyzeM)) $
    compiler.env.value.insert (gsvar qq{analyze}) (gsinject (value analyze)) $
    compiler.env.value.insert (gsvar qq{annotate-document}) (gsinject annotate-document) $
    compiler.env.value.insert (gsvar qq{annotator.global-env}) (gsinject annotator.global-env) $
    compiler.env.value.insert (gsvar qq{case}) (gsinject (value case)) $
    compiler.env.value.insert (gsvar qq{create-thread}) (gsinject create-thread) $
    compiler.env.value.insert (gsvar qq{exec-main-thread}) (gsinject exec-main-thread) $
    compiler.env.value.insert (gsvar qq{file}) (gsinject file) $
    compiler.env.value.insert (gsvar qq{gsapply}) (gsinject gsapply) $
    compiler.env.value.insert (gsvar qq{gsi.monad}) (gsinject gsi.monad) $
    compiler.env.value.insert (gsvar qq{gsinject}) (gsinject gsinject) $
    compiler.env.value.insert (gsvar qq{gsio.file.read}) (gsinject gsio.file.read) $
    compiler.env.value.insert (gsvar qq{gsio.monad}) (gsinject gsio.monad) $
    compiler.env.value.insert (gsvar qq{gsmain}) (gsinject gsmain) $
    compiler.env.value.insert (gsvar qq{gsvar}) (gsinject gsvar) $
    compiler.env.value.insert (gsvar qq{just}) (gsinject just) $
    compiler.env.value.insert (gsvar qq{mapM0}) (gsinject mapM0) $
    compiler.env.value.insert (gsvar qq{map}) (gsinject map) $
    compiler.env.value.insert (gsvar qq{natural.addition}) (gsinject natural.addition) $
    compiler.env.value.insert (gsvar qq{nil}) (gsinject nil) $
    compiler.env.value.insert (gsvar qq{parser.global-env}) (gsinject parser.global-env) $
    compiler.env.value.insert (gsvar qq{pos.init}) (gsinject pos.init) $
    compiler.env.value.insert (gsvar qq{parse}) (gsinject parse) $
    compiler.env.value.insert (gsvar qq{print-rune}) (gsinject print-rune) $
    compiler.env.value.insert (gsvar qq{true}) (gsinject true) $
    compiler.env.value.insert (gsvar qq{type-checker.unify}) (gsinject type-checker.unify) $
    compiler.env.value.insert (gsvar qq{type-checker.unit}) (gsinject type-checker.unit) $
    compiler.env.value.insert (gsvar qq{type.app}) (gsinject type.app) $
    compiler.env.value.insert (gsvar qq{type.consts}) (gsinject type.consts) $
    compiler.env.value.insert (gsvar qq{type.const}) (gsinject type.const) $
    compiler.env.value.insert (gsvar qq{type.empty-signature}) (gsinject type.empty-signature) $
    compiler.env.value.insert (gsvar qq{type.function}) (gsinject type.function) $
    compiler.env.value.insert (gsvar qq{undefined}) (gsinject (value undefined)) $
    compiler.env.value.insert (gsvar qq{λ}) (gsinject (value λ)) $
    compiler.env.value.insert (gsvar qq{∘}) (gsinject (∘)) $
    compiler.env.view.insert (gsvar qq{false}) (gsinject (view false)) $
    compiler.env.view.insert (gsvar qq{gsvalue.thunk}) (gsinject (view gsvalue.thunk)) $
    compiler.env.view.insert (gsvar qq{just}) (gsinject (view just)) $
    compiler.env.view.insert (gsvar qq{nothing}) (gsinject (view nothing)) $
    compiler.env.view.insert (gsvar qq{right}) (gsinject (view right)) $
    compiler.env.view.insert (gsvar qq{true}) (gsinject (view true)) $
    compiler.env.empty
|]
