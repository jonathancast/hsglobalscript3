{-# LANGUAGE TemplateHaskell #-}
module GSI.Either (gseitherFor, gseitherbind, gseithermap, gsleft, gsright, gsleft_view, gsright_view) where

import GSI.Syn (gsvar)
import GSI.Value (GSValue, gslambda_value, gsav, gsae, gsundefined_value)
import GSI.ByteCode (gsbcarg, gsbclfield, gsbcapply, gsbcprim, gsbcconstr, gsbcviewpattern, gsbcconstr_view, gsbcvarpattern, gsbcundefined)
import GSI.CalculusPrims (gspriminsufficientcases)
import GSI.StdLib (gsanalyze, gscase)
$gsimports

gseitherFor :: GSValue
gseitherFor = $gslambda_value $ \ gen -> $gsbcarg $ \ k -> $gsbcapply gseitherbind [ $gsav gen, $gsav k ]

gseitherbind = [gs:value| 位 'e. 位 'k. analyze e.
    case right 'x. k x
|]

gseithermap = [gs:value| 位 'f. 位 'e. analyze e.
    case left 'e. left e
    case right 'x. right (f x)
|]

gsleft :: GSValue
gsleft = $gslambda_value $ \ x -> $gsbcconstr (gsvar "left") [ $gsav x ]

gsright :: GSValue
gsright = $gslambda_value $ \ x -> $gsbcconstr (gsvar "right") [ $gsav x ]

gsleft_view :: GSValue
gsleft_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "left" ek sk e

gsright_view :: GSValue
gsright_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ e -> $gsbcconstr_view "right" ek sk e
