{-# LANGUAGE TemplateHaskell #-}
module GSDL.Compile (gscompile_document) where

$gsimports

$gsdeclare compile-expr gscompile_expr
$gsdeclare compile-arg gscompile_arg
$gsdeclare compile-function gscompile_function

gscompile_document = [gs:value| λ 'pos. λ 'env. λ 'd. analyze d.
    case document.in 'mbe 'mbg. (analyze mbe.
        case nothing. gsbcundefined pos
        case just 'e. compile-expr
            pos
            (analyze mbg.
                case nothing. env
            )
            e
    )
|]

$gsdeclare compile-open-expr gscompile_open_expr
$gsdeclare compile-pat gscompile_pat
$gsdeclare compile-fallible-pat gscompile_monoidal_pat

gscompile_expr = [gs:value| λ 'pos. λ 'env. λ 'e. analyze e.
    case expr.natural 'n. gsbcnatural pos n
    case expr.var 'v. (analyze compiler.env.value.get v env.
        case nothing. error log{§(log.dstr (pos.fmt pos))Variable §(log.str (gsvar.fmt-atom v)) not in scope}
        case just 'gsv. gsbcenter pos gsv
    )
    case expr.qlo 'v 'e 'x. e #compile pos env x
    case expr.open-expr 'e1 'mblvs. (analyze mblvs.
        case just 'lvs. compile-open-expr pos env e1 lvs
    )
    case expr.pat 'p _. compile-pat pos env p
    case expr.fallible-pat 'p _. compile-fallible-pat pos env p
    case expr.app 'f 'a. compile-arg pos env a (compile-function pos env f) nil
    case expr.missing-case. gsbcinsufficientcases pos
|]

gscompile_arg = [gs:value| λ 'pos. λ 'env. λ 'a. λ 'k. λ 'cas. analyze a.
    case arg.expr 'pos1 'e. k (gsae pos1 (compile-expr pos1 env e) : cas)
    case arg.explicit 'pos1 'e. k (gsae pos1 (compile-expr pos1 env e) : cas)
    case arg.here. gsbcwithhere pos (λ 'here. k (gsav here : cas))
|]

gscompile_function = [gs:value| λ 'pos. λ 'env. λ 'f. λ 'cas. analyze f.
    case expr.var 'v. (analyze compiler.env.value.get v env.
        case just 'gsv. gsbcapply pos gsv cas
        case nothing. error log{§(log.dstr (pos.fmt pos))Function §(log.str (gsvar.fmt-atom v)) not in scope}
    )
    case expr.app 'f 'a. compile-arg pos env a (compile-function pos env f) cas
|]

gscompile_open_expr = [gs:value| λ 'pos. λ 'env. λ 'e. λ 'lvs. gsbcarg pos (λ 'env1.
    foldr
        (λ 'v. λ 'k. λ 'env0. gsbclfield pos v env1 (λ 'x. k (compiler.env.value.insert v x env0)))
        (λ 'env0. compile-expr pos env0 e)
        lvs
      env
) |]

gscompile_pat = [gs:value| λ 'pos. λ 'env. λ 'p. analyze p.
    case pat.discard. gsbcdiscardpattern pos
    case pat.var 'v. gsbcvarpattern pos v
|]

$gsdeclare compile-infallible-pat gscompile_infallible_pat
$gsdeclare compile-fallible-pat-function gscompile_fallible_pat_function

gscompile_monoidal_pat = [gs:value| λ 'pos. λ 'env. λ 'p. analyze p.
    case pat.discard. compile-infallible-pat pos env p
    case pat.var 'v. compile-infallible-pat pos env p
    case pat.view 'v. (analyze compiler.env.view.get v env.
        case just 'gsv. gsbcviewpattern pos gsv nil
        case nothing. error log{§(gsv pos): view §(gsv v) not in the compiler environment}
    )
    case pat.app 'p0 'pos1 'p1. compile-fallible-pat-function pos env p0 (〈 '0 ∝ pos1; '1 ∝ p1; 〉 : nil)
|]

gscompile_infallible_pat = [gs:value| λ 'pos. λ 'env. λ 'p.
    gsbcapply pos (gsinject gsinfalliblepattern) (gsae pos (compile-pat pos env p) : nil)
|]

gscompile_fallible_pat_function = [gs:value| λ 'pos. λ 'env. λ 'p. λ 'pas. analyze p.
    case pat.app 'p0 'pos1 'p1. compile-fallible-pat-function pos env p0 (〈 '0 ∝ pos1; '1 ∝ p1; 〉 : pas)
    case pat.view 'v. (analyze compiler.env.view.get v env.
        case just 'gsv. gsbcviewpattern pos gsv (map (λ 'pp. gsae (pp #0) (compile-fallible-pat (pp #0) env (pp #1))) pas)
        case nothing. error log{§(log.dstr (pos.fmt pos)): view §(log.str (gsvar.fmt-atom v)) not in the compiler environment}
    )
|]
