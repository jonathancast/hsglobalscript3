module GSDL.Annotator (gsannotator_env_category_insert, gsannotator_env_category_get, gsannotator_env_qlo_insert, gsannotator_env_qlo_get, gsannotator_env_pattern_get, gsannotator_env_pattern_modify, gsannotator_env_empty, gspat_bound_vars) where

$gsimports

gsannotator_env_category_insert = [gs:value| λ 'v. λ 'c. λ 'env. record.∧  〈 'category ∝ ordered-map.insert gsvar.<=> v c (env #category); 〉 env |]

gsannotator_env_qlo_insert = [gs:value| λ 'v. λ 'f. λ 'env. record.∧  〈 'qlo ∝ ordered-map.insert gsvar.<=> v f (env #qlo); 〉 env |]

gsannotator_env_category_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.<=> v (env #category) |]

gsannotator_env_qlo_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.<=> v (env #qlo) |]

gsannotator_env_pattern_get = [gs:value| λ 'env. 〈
    'qlo ∝ env #pat.qlo;
〉 |]

gsannotator_env_pattern_set = [gs:value| λ 'env1. λ 'env. record.∧ 〈 'pat.qlo ∝ env1 #qlo; 〉 env |]

$gsdeclare annotator.env.pattern.set gsannotator_env_pattern_set

gsannotator_env_pattern_modify = [gs:value| λ 'f. λ 'env. annotator.env.pattern.set (f (annotator.env.pattern.get env)) env |]

gsannotator_env_empty = [gs:value| 〈 'category ∝ ordered-map.empty; 'qlo ∝ ordered-map.empty; 'pat.qlo ∝ ordered-map.empty; 〉 |]

gspat_bound_vars = [gs:value| λ 'p. analyze p.
    case pat.discard. nil
    case pat.var 'v. v : nil
    case pat.view 'v. nil
    case pat.app 'p0 _ 'p1. pat.bound-vars p0 <> pat.bound-vars p1
|]
