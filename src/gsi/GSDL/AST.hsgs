{-# LANGUAGE TemplateHaskell #-}
module GSDL.AST (
    gstype_env_type_get, gstype_env_type_insert, gstype_env_vars, gstype_env_var_types,
    gstype_env_view_type_get, gstype_env_view_type_insert, gstype_env_views,
    gstype_env_types,
    gstype_env_implicits_get, gstype_env_implicits_insert,
    gstype_env_overlay, gstype_env_empty,
    gsfile_document, gsfile_document_view,
    gsdocument_in, gsdocument_in_view,
    gstype_apply,
    gstype_unifiable_var, gstype_const, gstype_signature, gstype_empty_signature, gstype_forall, gstype_app, gstype_function, gstype_consts,
    gstype_unifiable_var_view, gstype_const_view, gstype_signature_view, gstype_forall_view, gstype_app_view, gstype_function_view,
    gskind_pointed,
    gsexpr_natural, gsexpr_var, gsexpr_structure_literal, gsexpr_app, gsexpr_qlo, gsexpr_generator, gsexpr_open_expr, gsexpr_pat, gsexpr_fallible_pat, gsexpr_value_var, gsexpr_missing_case, gsexpr_natural_view, gsexpr_var_view, gsexpr_app_view, gsexpr_qlo_view, gsexpr_open_expr_view, gsexpr_pat_view, gsexpr_fallible_pat_view, gsexpr_value_var_view, gsexpr_missing_case_view,
    gsqloitem_char, gsqloitem_char_view,
    gsimplicit_here, gsimplicit_here_view,
    gsarg_expr, gsarg_here, gsarg_explicit, gsarg_expr_view, gsarg_here_view, gsarg_explicit_view,
    gsgenerator_var, gsgenerator_app,
    gspat_discard, gspat_discard_view, gspat_var, gspat_view, gspat_var_view, gspat_view_view, gspat_app, gspat_app_view,
    gsorder_of_being_generator, gsorder_of_being_open_expr, gsorder_of_being_value_var, gsorder_of_being_pattern, gsorder_of_being_generator_view, gsorder_of_being_open_expr_view, gsorder_of_being_pattern_view, gsorder_of_being_value_var_view,
    gscategory_fallible, gscategory_fallible_view,
    gssyntactic_category_lambda_like, gssyntactic_category_variable, gssyntactic_category_where, gssyntactic_category_lambda_like_view, gssyntactic_category_variable_view, gssyntactic_category_where_view
  ) where

import GSI.Syn (gsvar)
import GSI.Value (gslambda_value, gsconstr, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)
$gsimports

gstype_env_type_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #types) |]

gstype_env_type_insert = [gs:value| λ 'v. λ 'ty. λ 'env. 〈
    'types ∝ ordered-map.insert gsvar.compare v ty (env #types);
    'view-types ∝ env #view-types;
    'implicits ∝ env #implicits;
〉 |]

gstype_env_types = [gs:value| λ 'env. ordered-map.values (env #types) <> ordered-map.values (env #view-types) |]

gstype_env_vars = [gs:value| λ 'env. ordered-map.keys (env #types) |]

gstype_env_var_types = [gs:value| λ 'env. ordered-map.to-list (env #types) |]

gstype_env_view_type_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #view-types) |]

gstype_env_view_type_insert = [gs:value| λ 'v. λ 'ty. λ 'env. 〈
    'types ∝ env #types;
    'view-types ∝ ordered-map.insert gsvar.compare v ty (env #view-types);
    'implicits ∝ env #implicits;
〉 |]

gstype_env_views = [gs:value| λ 'env. ordered-map.keys (env #view-types) |]

gstype_env_implicits_get = [gs:value| λ 'v. λ 'env. analyze ordered-map.get gsvar.compare v (env #implicits).
    case nothing. nil
    case just 'is. is
|]

gstype_env_implicits_insert = [gs:value| λ 'v. λ 'is. λ 'env. 〈
    'types ∝ env #types;
    'view-types ∝ env #view-types;
    'implicits ∝ ordered-map.insert gsvar.compare v is (env #implicits);
〉 |]

gstype_env_overlay = [gs:value| λ 'env0. λ 'env1. 〈
    'types ∝ ordered-map.∪ gsvar.compare (env0 #types) (env1 #types);
    'view-types ∝ ordered-map.∪ gsvar.compare (env0 #view-types) (env1 #view-types);
    'implicits ∝ ordered-map.∪ gsvar.compare (env0 #implicits) (env1 #implicits);
〉 |]

gstype_env_empty = [gs:value| 〈 'types ∝ ordered-map.empty; 'view-types ∝ ordered-map.empty; 'implicits ∝ ordered-map.empty; 〉 |]

gsfile_document = $gslambda_value $ \ pos -> $gsbcarg $ \ d -> $gsbcconstr (gsvar "document") [ $gsav pos, $gsav d ]

gsfile_document_view = $gsbcconstr_view "document"

gsdocument_in = $gslambda_value $ \ mbe -> $gsbcarg $ \ mbg -> $gsbcconstr (gsvar "in") [ $gsav mbe, $gsav mbg ]

gsdocument_in_view = $gsbcconstr_view "in"

gstype_empty_signature = [gs:value| type.signature type.env.empty |]
gstype_consts = [gs:value| λ 's. type.const (gsvar s) |]
gstype_apply = [gs:value| foldl type.app |]

gstype_unifiable_var = $gslambda_value $ \ r -> $gsbcconstr (gsvar "unifiable-var") [ $gsav r ]
gstype_const = $gslambda_value $ \ c -> $gsbcconstr (gsvar "const") [ $gsav c ]
gstype_signature = $gslambda_value $ \ env -> $gsbcconstr (gsvar "signature") [ $gsav env ]
gstype_forall = $gslambda_value $ \ v -> $gsbcarg $ \ ki -> $gsbcarg $ \ ty1 -> $gsbcconstr (gsvar "forall") [ $gsav v, $gsav ki, $gsav ty1 ]
gstype_app = $gslambda_value $ \ ty0 -> $gsbcarg $ \ ty1 -> $gsbcconstr (gsvar "app") [ $gsav ty0, $gsav ty1 ]
gstype_function = $gslambda_value $ \ ty0 -> $gsbcarg $ \ ty1 -> $gsbcconstr (gsvar "function") [ $gsav ty0, $gsav ty1 ]

gstype_unifiable_var_view = $gsbcconstr_view "unifiable-var"
gstype_const_view = $gsbcconstr_view "const"
gstype_signature_view = $gsbcconstr_view "signature"
gstype_app_view = $gsbcconstr_view "app"
gstype_function_view = $gsbcconstr_view "function"
gstype_forall_view = $gsbcconstr_view "forall"

gskind_pointed = $gsconstr (gsvar "pointed") []

gsexpr_natural = $gslambda_value $ \ n -> $gsbcconstr (gsvar "natural") [ $gsav n ]
gsexpr_var = $gslambda_value $ \ id -> $gsbcconstr (gsvar "var") [ $gsav id ]
gsexpr_structure_literal = $gslambda_value $ \ gs -> $gsbcconstr (gsvar "structure-literal") [ $gsav gs ]
gsexpr_app = $gslambda_value $ \ fe -> $gsbcarg $ \ xe -> $gsbcconstr (gsvar "app") [ $gsav fe, $gsav xe ]
gsexpr_qlo = $gslambda_value $ \ v -> $gsbcarg $ \ e -> $gsbcarg $ \ x -> $gsbcconstr (gsvar "qlo") [ $gsav v, $gsav e, $gsav x ]
gsexpr_fallible_pat = $gslambda_value $ \ p -> $gsbcarg $ \ mb -> $gsbcconstr (gsvar "fallible-pat") [ $gsav p, $gsav mb ]
gsexpr_generator = $gslambda_value $ \ gs -> $gsbcarg $ \ mb -> $gsbcconstr (gsvar "generator") [ $gsav gs, $gsav mb ]
gsexpr_open_expr = $gslambda_value $ \ e -> $gsbcarg $ \ mb -> $gsbcconstr (gsvar "open-expr") [ $gsav e, $gsav mb ]
gsexpr_pat = $gslambda_value $ \ p -> $gsbcarg $ \ mb -> $gsbcconstr (gsvar "pat") [ $gsav p, $gsav mb ]
gsexpr_value_var = $gslambda_value $ \ i -> $gsbcconstr (gsvar "value-var") [ $gsav i ]
gsexpr_missing_case = $gsconstr (gsvar "missing-case") []

gsexpr_natural_view = $gsbcconstr_view "natural"
gsexpr_var_view = $gsbcconstr_view "var"
gsexpr_app_view = $gsbcconstr_view "app"
gsexpr_qlo_view = $gsbcconstr_view "qlo"
gsexpr_open_expr_view = $gsbcconstr_view "open-expr"
gsexpr_pat_view = $gsbcconstr_view "pat"
gsexpr_fallible_pat_view = $gsbcconstr_view "fallible-pat"
gsexpr_value_var_view = $gsbcconstr_view "value-var"
gsexpr_missing_case_view = $gsbcconstr_view "missing-case"

gsqloitem_char = $gslambda_value $ \ r -> $gsbcconstr (gsvar "char") [ $gsav r ]

gsqloitem_char_view = $gsbcconstr_view "char"

gsimplicit_here = $gsconstr (gsvar "here") []

gsimplicit_here_view = $gsbcconstr_view "here"

gsarg_expr = $gslambda_value $ \ pos -> $gsbcarg $ \ e -> $gsbcconstr (gsvar "expr") [ $gsav pos, $gsav e ]
gsarg_here = $gsconstr (gsvar "here") []
gsarg_explicit = $gslambda_value $ \ pos -> $gsbcarg $ \ e -> $gsbcconstr (gsvar "explicit") [ $gsav pos, $gsav e ]

gsarg_expr_view = $gsbcconstr_view "expr"
gsarg_here_view = $gsbcconstr_view "here"
gsarg_explicit_view = $gsbcconstr_view "explicit"

gsgenerator_var = $gslambda_value $ \ v -> $gsbcconstr (gsvar "var") [ $gsav v ]
gsgenerator_app = $gslambda_value $ \ g0 -> $gsbcarg $ \ pos -> $gsbcarg $ \ g1 -> $gsbcconstr (gsvar "app") [ $gsav g0, $gsav pos, $gsav g1 ]

gspat_discard = $gsconstr (gsvar "discard") []
gspat_var = $gslambda_value $ \ v -> $gsbcconstr (gsvar "var") [ $gsav v ]
gspat_view = $gslambda_value $ \ v -> $gsbcconstr (gsvar "view") [ $gsav v ]
gspat_app = $gslambda_value $ \ p0 -> $gsbcarg $ \ pos -> $gsbcarg $ \ p1 -> $gsbcconstr (gsvar "app") [ $gsav p0, $gsav pos, $gsav p1 ]

gspat_discard_view = $gsbcconstr_view "discard"
gspat_var_view = $gsbcconstr_view "var"
gspat_view_view = $gsbcconstr_view "view"
gspat_app_view = $gsbcconstr_view "app"

gsorder_of_being_generator = $gsconstr (gsvar "generator") []
gsorder_of_being_open_expr = $gsconstr (gsvar "open-expr") []
gsorder_of_being_pattern = $gsconstr (gsvar "pattern") []
gsorder_of_being_value_var = $gsconstr (gsvar "value-var") []

gscategory_fallible = $gsconstr (gsvar "fallible") []
gscategory_fallible_view = $gsbcconstr_view "fallible"

gsorder_of_being_generator_view = $gsbcconstr_view "generator"
gsorder_of_being_open_expr_view = $gsbcconstr_view "open-expr"
gsorder_of_being_pattern_view = $gsbcconstr_view "pattern"
gsorder_of_being_value_var_view = $gsbcconstr_view "value-var"

gssyntactic_category_lambda_like = $gsconstr (gsvar "lambda-like") []
gssyntactic_category_variable = $gsconstr (gsvar "variable") []
gssyntactic_category_where = $gsconstr (gsvar "where") []

gssyntactic_category_lambda_like_view = $gsbcconstr_view "lambda-like"
gssyntactic_category_variable_view = $gsbcconstr_view "variable"
gssyntactic_category_where_view = $gsbcconstr_view "where"
