module GSDL.Implicit (gsadd_implicits_document, gsadd_implicits_expr, gsadd_implicits_pat, gsadd_implicits_pat_qloitem) where

$gsimports

gsadd_implicits_document = [gs:value| λ 'env. λ 'd. analyze d.
    case document.in 'mbe 'mbg. document.in (maybe.map (add-implicits-expr env) mbe) (maybe.map (undefined env) mbg)
|]

$gsdeclare add-implicits-pat gsadd_implicits_pat
$gsdeclare add-implicits-generator gsadd_implicits_generator

$gsdeclare add-implicits-arg gsadd_implicits_arg

gsadd_implicits_expr = [gs:value| λ 'env. λ 'e. analyze e.
    case expr.natural 'n. e
    case expr.var 'v. foldl
        (λ 'f. λ 'c. analyze c.
        )
        e
        (implicit.env.consumes.get v env)
    case expr.unary 'v. expr.unary v
    case expr.structure-literal 'gs 'pos1. expr.structure-literal (map (λ 'p. 〈 'pos ∝ p #pos; 'gen ∝ add-implicits-generator (p #pos) env (p #gen); 'bvs ∝ p #bvs; 〉) gs) pos1
    case expr.qlo 'v 'x. expr.qlo v (maybe.out undefined (implicit.env.qlo.get v env) env x)
    case expr.app 'f 'x. expr.app (add-implicits-expr env f) (add-implicits-arg env x)
    case expr.pat 'p 'mb. expr.pat (add-implicits-pat env p) mb
    case expr.fallible-pat 'p 'mb. expr.fallible-pat (add-implicits-pat env p) mb
    case expr.monadic-generators 'gs 'pos1. expr.monadic-generators (map (λ 'p. 〈 'pos ∝ p #pos; 'gen ∝ add-implicits-generator (p #pos) env (p #gen); 'bvs ∝ p #bvs; 〉) gs) pos1
    case expr.generators 'gs 'pos1. expr.generators (map (λ 'p. 〈 'pos ∝ p #pos; 'gen ∝ add-implicits-generator (p #pos) env (p #gen); 'bvs ∝ p #bvs; 〉) gs) pos1
    case expr.open-expr 'e 'mb. expr.open-expr (add-implicits-expr env e) mb
    case expr.value-var 'v. expr.value-var v
    case expr.missing-case. expr.missing-case
|]

gsadd_implicits_arg = [gs:value| λ 'env. λ 'a. analyze a.
    case arg.var 'v. arg.var v
    case arg.var-name 'v. arg.var-name v
    case arg.expr 'pos 'e. arg.expr pos (add-implicits-expr env e)
    case arg.explicit 'pos 'e. arg.explicit pos (add-implicits-expr env e)
    case arg.app 'af 'ax. arg.app (add-implicits-arg env af) (add-implicits-arg env ax)
|]

gsadd_implicits_pat = [gs:value| λ 'env. λ 'p. analyze p.
    case pat.discard. pat.discard
    case pat.var 'v. pat.var v
    case pat.view 'v. pat.view v
    case pat.qlo 'v 'x. (analyze implicit.env.qlo.get v (implicit.env.pattern.get env).
        case nothing. error log{add-implicits for pattern qlo §(log.str (gsvar.fmt-atom v))}
        case just 'f. pat.qlo v (f env x)
    )
    case pat.app 'p0 'pos1 'p1. pat.app (add-implicits-pat env p0) pos1 (add-implicits-pat env p1)
|]

gsadd_implicits_pat_qloitem = [gs:value| λ 'env. λ 'qi. analyze qi.
    case qloitem.char 'ch. qloitem.char ch
    case qloitem.qchar 'ch. qloitem.qchar ch
    case qloitem.interp 'pos 'p. qloitem.interp pos (add-implicits-pat env p)
|]

gsadd_implicits_generator = [gs:value| λ 'pos. λ 'env. λ 'g. analyze g.
    case generator.var 'v. foldl (λ 'f. λ 'a. generator.app f pos a) (generator.var v) $
        map (λ 'c. generator.expr $ analyze c.
            case consume.monad. expr.monad
        ) $
            implicit.env.consumes.get v (implicit.env.generators.get env)
    case generator.app 'g0 'pos1 'g1. generator.app (add-implicits-generator pos env g0) pos (add-implicits-generator pos1 env g1)
    case generator.pattern 'p 'mb. generator.pattern (add-implicits-pat env p) mb
    case generator.expr 'e. generator.expr (add-implicits-expr env e)
|]
