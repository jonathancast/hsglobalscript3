{-# LANGUAGE TemplateHaskell #-}
module GSDL.Syntax (file, pragmas, pragmawhitespace, ident, lexeme, whitespace) where

$gsimports

file = [gs:value| λ 'env.
    <|> parser.for
            _ ← pragmas;
            'pos ← get-pos;
            'mb ← whitespace *> optional (expr env);
        . parser.unit (file.document pos mb)
|]

pragmas = [gs:value| pragma.whitespace *> many empty |]

pragmawhitespace = [gs:value| many (
    <|> (
        *> string qq{#!}
        *> many (matching log{comment body character} (λ 'c. c ≠ r{\n}))
        *> char r{\n}
        *> parser.unit 〈〉
    )
    <|> (
        *> string qq{\n}
        *> parser.unit 〈〉
    )
) |]

expr = [gs:value| λ 'env.
    <|> parser.unit (foldl expr.app)
        <*> (expr.atom env)
        <*> many (parser.unit arg.expr <*> get-pos <*> (expr.atom env))
|]

$gsdeclare parens parens

gsexpr_atom = [gs:value| λ 'env.
    <|> parens (expr env)
    <|> parser.map expr.var (ident env)
|]

parens = [gs:value| λ 'p. lexeme (matching log{open parenthesis} (rune.≡ r{\(})) *> p <* lexeme (matching log{close parenthesis} (rune.≡ r{\)})) |]

$gsdeclare ident-start-char identStartChar
$gsdeclare ident-cont-char identContChar

ident = [gs:value| λ 'env. lexeme $ parser.for
        'v ← parser.map gsvar
            (parser.map2 (:) ident-start-char (many ident-cont-char) <* not-followed-by ident-cont-char)
        ;
        _ ← analyze parser.get-lambda-like v env.
            case nothing. parser.unit 〈〉
        ;
    . parser.unit v
|]

identStartChar = [gs:value| matching log{ident start character} is-lower |]
identContChar = [gs:value| matching log{ident cont character} is-lower |]

opContChar = [gs:value| matching log{op cont character} (rune.≡ r{-}) |]

lexeme = [gs:value| λ 'p. p <* whitespace |]

$gsdeclare op-cont-char opContChar

whitespace = [gs:value| many (
    <|> matching log{whitespace} is-space
    <|> (
        *> string qq{--}
        *> not-followed-by op-cont-char
        *> many (matching log{non-newline} (rune.≠ r{\n}))
        *> matching log{newline} (rune.≡ r{\n})
    )
) |]
