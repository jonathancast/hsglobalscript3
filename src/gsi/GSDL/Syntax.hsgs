{-# LANGUAGE TemplateHaskell #-}
module GSDL.Syntax (file, pragmas, pragmawhitespace, ident, lexeme, whitespace) where

$gsimports

file = [gs:value| λ 'env.
    <|> parser.for
            _ ← pragmas;
            'pos ← get-pos;
            'mb ← whitespace *> optional (parser.for 'p ← expr env;. parser.unit (p #0));
        . parser.unit (file.document pos mb)
|]

pragmas = [gs:value| pragma.whitespace *> many empty |]

pragmawhitespace = [gs:value| many (
    <|> (
        *> string qq{#!}
        *> many (matching log{comment body character} (λ 'c. c ≠ r{\n}))
        *> char r{\n}
        *> parser.unit 〈〉
    )
    <|> (
        *> string qq{\n}
        *> parser.unit 〈〉
    )
) |]

$gsdeclare expr.function gsexpr_function

expr = [gs:value| λ 'env.
    <|> expr.function env
|]

$gsdeclare expr.function.w gsexpr_function_w

gsexpr_function = [gs:value| λ 'env. parser.for 'p ← expr.atom env;. expr.function.w env (p #0) (p #1) |]

$gsdeclare pat gspat

gsexpr_function_w = [gs:value| λ 'env. λ 'e. λ 's.
    <|> parser.unit 〈 '0 ∝ e; '1 ∝ s; 〉
    <|> (parser.for
            'pos ← get-pos;
            'p ← analyze s.
                case order-of-being.pattern : 's1. parser.for 'p ← pat;. parser.unit 〈 '0 ∝ expr.pat p; '1 ∝ s1; 〉
                case nil. parser.for 'p ← expr.atom env;. parser.unit 〈 '0 ∝ p #0; '1 ∝ nil; 〉
            ;
        . expr.function.w env (expr.app e (arg.expr pos (p #0))) (p #1)
    )
|]

$gsdeclare parens parens

gsexpr_atom = [gs:value| λ 'env.
    <|> parens (expr env)
    <|> (parser.for 'v ← ident env;. parser.unit 〈
        '0 ∝ expr.var v;
        '1 ∝ analyze parser.env.signature.get v env. case nothing. nil case just 's. s;
    〉)
|]

$gsdeclare pident pident

gspat = [gs:value|
    <|> (parser.for 'v ← char r{'} *> pident;. parser.unit (pat.var v))
|]

parens = [gs:value| λ 'p. lexeme (matching log{open parenthesis} (rune.≡ r{\(})) *> p <* lexeme (matching log{close parenthesis} (rune.≡ r{\)})) |]

$gsdeclare ident-chars ident_chars

ident = [gs:value| λ 'env. lexeme $ parser.for
        'v ← parser.map gsvar ident-chars;
        _ ← analyze parser.env.lambda-like.get v env.
            case nothing. parser.unit 〈〉
        ;
    . parser.unit v
|]

pident = [gs:value| lexeme $ parser.map gsvar ident-chars |]

$gsdeclare ident-start-char identStartChar
$gsdeclare ident-cont-char identContChar

ident_chars = [gs:value| parser.map2 (:) ident-start-char (many ident-cont-char) <* not-followed-by ident-cont-char |]

identStartChar = [gs:value| matching log{ident start character} is-lower |]
identContChar = [gs:value| matching log{ident cont character} is-lower |]

opContChar = [gs:value| matching log{op cont character} (rune.≡ r{-}) |]

lexeme = [gs:value| λ 'p. p <* whitespace |]

$gsdeclare op-cont-char opContChar

whitespace = [gs:value| many (
    <|> matching log{whitespace} is-space
    <|> (
        *> string qq{--}
        *> not-followed-by op-cont-char
        *> many (matching log{non-newline} (rune.≠ r{\n}))
        *> matching log{newline} (rune.≡ r{\n})
    )
) |]
