module GSDL.Annotate (gsannotate_document, gsannotate_expr, gsannotate_qloitem, ) where

$gsimports

$gsdeclare annotate-expr gsannotate_expr

gsannotate_document = [gs:value| λ 'env. λ 'd. analyze d.
    case document.in 'mbe 'mbg. document.in
        (analyze mbe.
            case nothing. nothing
            case just 'e. just (annotate-expr env e)
        )
        (analyze mbg.
            case nothing. nothing
        )
|]

$gsdeclare annotate-pat gsannotate_pat

$gsdeclare annotate-app gsannotate_app

gsannotate_expr = [gs:value| λ 'env. λ 'e. analyze e.
    case expr.var 'v. expr.var v
    case expr.natural 'n. expr.natural n
    case expr.qlo 'v 'e 'x. expr.qlo v e (e #annotate env x)
    case expr.pat 'p 'mb. expr.pat (annotate-pat env p) (just (analyze mb.
        case nothing. pat.bound-vars p
    ))
    case expr.open-expr 'e1 'mb. expr.open-expr (annotate-expr env e1) (just (analyze mb.
        case nothing. nil
        case just 'bvs. bvs
    ))
    case expr.app 'f 'x. annotate-app env f (x:nil)
    case expr.missing-case. expr.missing-case
|]

$gsdeclare annotate-generator gsannotate_generator

gsannotate_expr_arg = [gs:value| λ 'env. λ 'e. λ 'ns. λ 'c. analyze e.
    case expr.var 'v. expr.var v
    case expr.natural 'n. expr.natural n
    case expr.qlo 'v 'e 'x. expr.qlo v e (e #annotate env x)
    case expr.pat 'p 'mb.
        (analyze c.
            case nothing. expr.pat
            case just category.fallible. expr.fallible-pat
        )
            (annotate-pat env p)
            (just (analyze mb.
                case nothing. (analyze ns.
                    case nothing. pat.bound-vars p
                    case just 'bvs. bvs
                )
            ))
    case expr.generator 'g 'mb. -- See pat case
        (analyze c.
        )
            (annotate-generator env g)
            (just (analyze mb.
            ))
    case expr.open-expr 'e1 'mb. expr.open-expr (annotate-expr env e1) (just (analyze mb.
        case nothing. (analyze ns.
            case nothing. nil
            case just 'bvs. bvs
        )
        case just 'bvs. bvs
    ))
    case expr.value-var 'v. expr.value-var v
    case expr.app 'f 'x. annotate-app env f (x:nil)
    case expr.missing-case. expr.missing-case
|]

$gsdeclare annotate-arg gsannotate_arg

gsannotate_app = [gs:value| λ 'env. λ 'f. λ 'as. analyze f.
    case expr.var 'v. foldl expr.app (expr.var v) $
        map3 (annotate-arg env)
            as
            (analyze annotator.env.namespace.get v env.
                case nothing. repeat nothing
                case just 'ns-decl. ns-decl as <> repeat nothing
            )
            (analyze annotator.env.category.get v env.
                case nothing. repeat nothing
                case just 'c-decl. c-decl as <> repeat nothing
            )
    case expr.app 'f1 'x. annotate-app env f1 (x:as)
|]

$gsdeclare annotate-expr-arg gsannotate_expr_arg

gsannotate_arg = [gs:value| λ 'env. λ 'a. λ 'ns. λ 'c. analyze a.
    case arg.expr 'pos1 'e. arg.expr pos1 (annotate-expr-arg env e ns c)
    case arg.explicit 'pos1 'e. arg.explicit pos1 (annotate-expr-arg env e ns c)
|]

gsannotate_qloitem = [gs:value| λ 'env. λ 'q. analyze q.
    case qloitem.char 'ch. qloitem.char ch
|]

gsannotate_generator = [gs:value| λ 'env. λ 'g. analyze g.
|]

gsannotate_pat = [gs:value| λ 'env. λ 'p. analyze p.
    case pat.discard. pat.discard
    case pat.var 'v. pat.var v
    case pat.view 'v. pat.view v
    case pat.app 'p0 'pos1 'p1. pat.app (annotate-pat env p0) pos1 (annotate-pat env p1)
|]
