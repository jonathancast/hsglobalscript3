module GSDL.Annotate (gsannotate_document, gsannotate_expr, gsannotate_qloitem, ) where

$gsimports

$gsdeclare annotate-expr gsannotate_expr

gsannotate_document = [gs:value| λ 'env. λ 'd. analyze d.
    case document.in 'mbe 'mbg. document.in
        (analyze mbe.
            case nothing. nothing
            case just 'e. just (annotate-expr env e)
        )
        (analyze mbg.
            case nothing. nothing
        )
|]

$gsdeclare annotate-pat gsannotate_pat
$gsdeclare annotate-generator gsannotate_generator

$gsdeclare annotate-app gsannotate_app

gsannotate_expr = [gs:value| λ 'env. λ 'e. analyze e.
    case expr.var 'v. expr.var v
    case expr.natural 'n. expr.natural n
    case expr.qlo 'v 'e 'x. expr.qlo v e (e #annotate env x)
    case expr.structure-literal 'gs 'pos1. expr.structure-literal
        (map
            (λ 'p. for 'p1 ∝ annotate-generator env (p #gen);. 〈 'pos ∝ p #pos; 'gen ∝ p1 #0; 'bvs ∝ just (p1 #1); 〉 )
            gs
        )
        pos1
    case expr.pat 'p 'mb. expr.pat (annotate-pat env p) (just (analyze mb.
        case nothing. pat.bound-vars p
    ))
    case expr.open-expr 'e1 'mb. expr.open-expr (annotate-expr env e1) (just (analyze mb.
        case nothing. nil
        case just 'bvs. bvs
    ))
    case expr.app 'f 'x. annotate-app env f (x:nil)
    case expr.missing-case. expr.missing-case
|]

gsannotate_expr_arg = [gs:value| λ 'env. λ 'c. λ 'e. analyze e.
    case expr.var 'v. expr.var v
    case expr.natural 'n. expr.natural n
    case expr.qlo 'v 'e 'x. expr.qlo v e (e #annotate env x)
    case expr.pat 'p 'mb.
        for 'p ∝ annotate-pat env p;.
            (analyze c.
                case nothing. expr.pat
                case just category.fallible. expr.fallible-pat
            )
                (p #0)
                (just (p #1))
    case expr.generators 'gs 'pos1. -- See pat case
        (analyze c.
            case nothing. expr.generators
        )
            (map
                (λ 'p. for 'p1 ∝ annotate-generator env (p #gen);. 〈 'pos ∝ p #pos; 'gen ∝ p1 #0; 'bvs ∝ just (p1 #1); 〉 )
                gs
            )
            pos1
    case expr.open-expr 'e1 'mb. expr.open-expr (annotate-expr env e1) nothing
    case expr.value-var 'v. expr.value-var v
    case expr.app 'f 'x. annotate-app env f (x:nil)
    case expr.missing-case. expr.missing-case
|]

$gsdeclare annotate-arg gsannotate_arg
$gsdeclare annotate-get-name-set gsannotate_get_name_set
$gsdeclare annotate-set-name-set-arg gsannotate_set_name_set_arg

gsannotate_app = [gs:value| λ 'env. λ 'f. λ 'as. analyze f.
    case expr.app 'f0 'a. annotate-app env f0 (a:as)
    case expr.var 'v.
        for 'cs ∝ analyze annotator.env.category.get v env.
                    case nothing. nil
                    case just 'c-decl. c-decl as
            ;. for 'as1 ∝ map2 (annotate-arg env) (cs <> repeat nothing) as;.
                for 'ns ∝ annotate-get-name-set as1;.
                    foldl expr.app (expr.var v) (map (annotate-set-name-set-arg ns) as1)
    case expr.structure-literal _ _. foldl expr.app (annotate-expr env f) (map (annotate-arg env nothing) as)
|]

$gsdeclare annotate-expr-arg gsannotate_expr_arg

gsannotate_arg = [gs:value| λ 'env. λ 'c. λ 'a. analyze a.
    case arg.var 'v. arg.var v
    case arg.var-name 'v. arg.var-name v
    case arg.expr 'pos 'e. arg.expr pos (annotate-expr-arg env c e)
    case arg.explicit 'pos 'e. arg.explicit pos (annotate-expr env e)
    case arg.app 'af 'ax. arg.app (annotate-arg env nothing af) (annotate-arg env nothing ax)
|]

gsannotate_get_name_set = [gs:value| λ 'as. analyze as.
    case arg.expr _ (expr.pat _ (just 'ns)) : _. ns
    case arg.expr _ (expr.fallible-pat _ (just 'ns)) : _. ns
    case arg.expr _ (expr.generators 'gs _) : _. concat (map (λ 'p. analyze p #bvs. case just 'ns. ns) gs)
    case _ : 'as1. annotate-get-name-set as1
|]

$gsdeclare annotate-set-name-set gsannotate_set_name_set

gsannotate_set_name_set_arg = [gs:value| λ 'ns. λ 'a. analyze a.
    case arg.expr 'pos 'e. arg.expr pos (annotate-set-name-set ns e)
    case arg.explicit 'pos 'e. arg.explicit pos (annotate-set-name-set ns e)
|]

gsannotate_set_name_set = [gs:value| λ 'ns. λ 'e. analyze e.
    case expr.open-expr 'e1 _. expr.open-expr e1 (just ns)
    case 'e. e
|]

gsannotate_qloitem = [gs:value| λ 'env. λ 'q. analyze q.
    case qloitem.char 'ch. qloitem.char ch
|]

$gsdeclare annotate-generator-app gsannotate_generator_app

gsannotate_generator = [gs:value| λ 'env. λ 'g. analyze g.
    case generator.var 'x. 〈 '0 ∝ generator.var x; '1 ∝ nil; 〉
    case generator.app 'f 'pos 'x. annotate-generator-app env f (〈 '0 ∝ pos; '1 ∝ x; 〉 : nil)
    case generator.pattern 'p0 _. for 'r ∝ annotate-pat env p0;. 〈 '0 ∝ generator.pattern (r #0) (just (r #1)); '1 ∝ r #1; 〉
    case generator.expr 'e. 〈 '0 ∝ generator.expr (annotate-expr env e); '1 ∝ nil; 〉
|]

$gsdeclare annotate-generator-arg gsannotate_generator_arg
$gsdeclare annotate-get-name-set-generator-args gsannotate_get_name_set_generator_args
$gsdeclare annotate-set-name-set-generator-arg gsannotate_set_name_set_generator_arg

gsannotate_generator_app = [gs:value| λ 'env. λ 'f. λ 'as. analyze f.
    case generator.var 'v. for 'as1 ∝ map2 (annotate-generator-arg env) (repeat nothing) as;.
        for 'ns ∝ annotate-get-name-set-generator-args as1;.
            〈 '0 ∝ foldl (λ 'g. λ 'p. generator.app g (p #0) (p #1)) (generator.var v) (map (annotate-set-name-set-generator-arg ns) as1); '1 ∝ ns; 〉
    case generator.app 'f0 'pos 'x. annotate-generator-app env f0 (〈 '0 ∝ pos; '1 ∝ x; 〉 : as)
|]

gsannotate_generator_arg = [gs:value| λ 'env. λ 'c. λ 'p. for 'r ∝ annotate-generator env (p #1);. 〈 '0 ∝ p #0; '1 ∝ r #0; 〉 |]

gsannotate_get_name_set_generator_args = [gs:value| λ 'as. analyze as.
    case 'p : 'as1. (analyze p #1.
        case generator.pattern _ (just 'ns). ns
    )
|]

gsannotate_set_name_set_generator_arg = [gs:value| λ 'ns. λ 'p. analyze p #1.
    case generator.pattern 'p0 'mb. 〈 '0 ∝ p #0; '1 ∝ generator.pattern p0 mb; 〉
    case generator.expr 'e. 〈 '0 ∝ p #0; '1 ∝ generator.expr e; 〉
|]

gsannotate_pat = [gs:value| λ 'env. λ 'p. analyze p.
    case pat.discard. 〈 '0 ∝ pat.discard; '1 ∝ nil; 〉
    case pat.var 'v. 〈 '0 ∝ pat.var v; '1 ∝ v : nil; 〉
    case pat.view 'v. 〈 '0 ∝ pat.view v; '1 ∝ nil; 〉
    case pat.app 'p0 'pos1 'p1. for
            'p0a ∝ annotate-pat env p0;
            'p1a ∝ annotate-pat env p1;
        . 〈 '0 ∝ pat.app (p0a #0) pos1 (p1a #0); '1 ∝ p0a #1 <> p1a # 1; 〉
|]
