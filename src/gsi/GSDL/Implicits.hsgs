module GSDL.Implicits (gsadd_implicits_document, gsadd_implicits_expr, gsimplicit_env_consumes_get, gsimplicit_env_consumes_insert, gsimplicit_env_implicits_get, gsimplicit_env_implicits_insert, gsimplicit_env_empty) where

$gsimports

gsadd_implicits_document = [gs:value| λ 'env. λ 'd. analyze d.
    case document.in 'mbe 'mbg. document.in (maybe.map (add-implicits-expr env) mbe) (maybe.map (undefined env) mbg)
|]

$gsdeclare add-implicits-pat gsadd_implicits_pat
$gsdeclare add-implicits-generator gsadd_implicits_generator

$gsdeclare add-implicits-arg gsadd_implicits_arg

gsadd_implicits_expr = [gs:value| λ 'env. λ 'e. analyze e.
    case expr.natural 'n. e
    case expr.var 'v. foldl
        (λ 'f. λ 'i. analyze i.
            case implicit.here. expr.app f arg.here
        )
        e
        (implicit.env.implicits.get v env)
    case expr.unary 'v. expr.unary v
    case expr.structure-literal 'gs 'pos1. expr.structure-literal (map (λ 'p. 〈 'pos ∝ p #pos; 'gen ∝ add-implicits-generator env (p #gen); 'bvs ∝ p #bvs; 〉) gs) pos1
    case expr.qlo 'v 'e 'x. expr.qlo v e (e #add-implicits env x)
    case expr.app 'f 'x. expr.app (add-implicits-expr env f) (add-implicits-arg env x)
    case expr.pat 'p 'mb. expr.pat (add-implicits-pat env p) mb
    case expr.fallible-pat 'p 'mb. expr.fallible-pat (add-implicits-pat env p) mb
    case expr.generators 'gs 'pos1. expr.generators (map (λ 'p. 〈 'pos ∝ p #pos; 'gen ∝ add-implicits-generator env (p #gen); 'bvs ∝ p #bvs; 〉) gs) pos1
    case expr.open-expr 'e 'mb. expr.open-expr (add-implicits-expr env e) mb
    case expr.value-var 'v. expr.value-var v
    case expr.missing-case. expr.missing-case
|]

gsadd_implicits_arg = [gs:value| λ 'env. λ 'a. analyze a.
    case arg.var 'v. arg.var v
    case arg.var-name 'v. arg.var-name v
    case arg.expr 'pos 'e. arg.expr pos (add-implicits-expr env e)
    case arg.explicit 'pos 'e. arg.explicit pos (add-implicits-expr env e)
    case arg.app 'af 'ax. arg.app (add-implicits-arg env af) (add-implicits-arg env ax)
|]

gsadd_implicits_pat = [gs:value| λ 'env. λ 'p. analyze p.
    case pat.discard. pat.discard
    case pat.var 'v. pat.var v
    case pat.view 'v. pat.view v
    case pat.app 'p0 'pos1 'p1. pat.app (add-implicits-pat env p0) pos1 (add-implicits-pat env p1)
|]

gsadd_implicits_generator = [gs:value| λ 'env. λ 'g. analyze g.
    case generator.var 'v. generator.var v
    case generator.app 'g0 'pos 'g1. generator.app (add-implicits-generator env g0) pos (add-implicits-generator env g1)
    case generator.pattern 'p 'mb. generator.pattern (add-implicits-pat env p) mb
    case generator.expr 'e. generator.expr (add-implicits-expr env e)
|]

gsimplicit_env_consumes_get = [gs:value| λ 'v. λ 'env. analyze ordered-map.get gsvar.compare v (env #consumes).
    case nothing. nil
    case just 'is. is
|]

gsimplicit_env_implicits_get = [gs:value| λ 'v. λ 'env. analyze ordered-map.get gsvar.compare v (env #implicits).
    case nothing. nil
    case just 'is. is
|]

gsimplicit_env_consumes_insert = [gs:value| λ 'v. λ 'is. λ 'env. 〈
    'consumes ∝ ordered-map.insert gsvar.compare v is (env #consumes);
    'implicits ∝ env #implicits;
〉 |]

gsimplicit_env_implicits_insert = [gs:value| λ 'v. λ 'is. λ 'env. 〈
    'consumes ∝ env #consumes;
    'implicits ∝ ordered-map.insert gsvar.compare v is (env #implicits);
〉 |]

gsimplicit_env_empty = [gs:value| 〈 'consumes ∝ ordered-map.empty; 'implicits ∝ ordered-map.empty; 〉 |]
