{-# LANGUAGE TemplateHaskell #-}
module GSDL.TypeChecker (
    gstype_checker_unify,
    gstype_checker_instantiate, gstype_checker_subst,
    gs_type_checker_new_unifiable_var,
    gstype_checker_incorrect_type, gstype_checker_fmt_type,
    gstype_checker_env_get_type, gstype_checker_env_get_implicit,
    gstype_checker_get_var, gstype_checker_set_var,
    gstype_checker_for, gstype_checker_analyze, gstype_checker_foldM, gstype_checker_mapM, gstype_checker_zipWithM,
    gstype_checker_run, gstype_checker_unit, gstype_checker_bind, gstype_checker_map
  ) where

import GSI.Value (gslambda_value, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)
$gsimports

$gsdeclare type-checker.unify-do-var gstype_checker_unify_do_var
$gsdeclare type-checker.unify-var gstype_checker_unify_var

gstype_checker_unify = [gs:value| λ 'pos. λ 'ty0. λ 'ty1. analyze ty0.
    case type.unifiable-var 'v0. (analyze-type-checker-M type-checker.get-var v0.
        case nothing. (analyze ty1.
            case type.app _ _. type-checker.unify-var v0 ty1
            case type.unifiable-var 'v1. (analyze st.ref.≡ v0 v1.
                case false. type-checker.unify-var v0 ty1
            )
            case type.function _ _. type-checker.unify-var v0 ty1
        )
        case just 'ty01. type-checker.unify pos ty01 ty1
    )
    case type.empty-signature. (analyze ty1.
        case type.empty-signature. type-checker.unit 〈〉
    )
    case type.app 'ty00 'ty01. (analyze ty1.
        case type.unifiable-var 'v1. type-checker.unify-do-var pos ty0 v1
        case type.app 'ty10 'ty11. type-checker.for
                _ ← type-checker.unify pos ty00 ty10;
                _ ← type-checker.unify pos ty01 ty11;
            . type-checker.unit 〈〉
    )
    case type.function 'ty00 'ty01. (analyze ty1.
        case type.app _ _. type-checker.incorrect-type pos ty0 ty1
        case type.function 'ty10 'ty11. type-checker.for
                _ ← type-checker.unify pos ty00 ty10;
                _ ← type-checker.unify pos ty01 ty11;
            . type-checker.unit 〈〉
        case type.unifiable-var 'v1. type-checker.unify-do-var pos ty0 v1
    )
    case type.const 'c0. (analyze ty1.
        case type.unifiable-var 'v1. type-checker.unify-do-var pos ty0 v1
        case type.const 'c1. (analyze gsvar.compare c0 c1.
            case eq. type-checker.unit 〈〉
        )
        case type.function _ _. type-checker.incorrect-type pos ty0 ty1
    )
|]

gstype_checker_unify_do_var = [gs:value| λ 'pos. λ 'ty. λ 'v. analyze-type-checker-M type-checker.get-var v.
    case nothing. type-checker.unify-var v ty
    case just 'ty1. type-checker.unify pos ty ty1
|]

gstype_checker_get_var = [gs:value| λ 'v. λ 'env. impfor 'mb ← st.get-var v;. impunit (right mb) |]
gstype_checker_set_var = [gs:value| λ 'x. λ 'v. λ 'env. impfor _ ← st.set-var x v;. impunit (right 〈〉) |]

$gsdeclare type-var.unifiable-var gstype_var_unifiable_var
$gsdeclare type-var.const gstype_var_const

$gsdeclare type-checker.is-free-in gstype_checker_is_free_in

gstype_checker_unify_var = [gs:value| λ 'v. λ 'ty. analyze-type-checker-M type-checker.is-free-in (type-var.unifiable-var v) ty.
    case false. type-checker.set-var (just ty) v
|]

gstype_checker_instantiate = [gs:value| λ 'ty. analyze ty.
    case type.function 'ty0 'ty1. type-checker.unit ty
    case type.forall 'v 'ki 'ty1. type-checker.for
            'v1 ← type-checker.new-unifiable-var;
            'ty2 ← type-checker.subst v v1 ty1;
        . instantiate ty2
|]

gstype_checker_subst = [gs:value| λ 'v. λ 'ty0. λ 'ty1. analyze ty1.
    case type.forall 'v1 'ki 'ty10. (analyze gsvar.≡ v v1.
        case false. (analyze-type-checker-M type-checker.is-free-in (type-var.const v1) ty0.
            case false. type-checker.for 'ty101 ← type-checker.subst v ty0 ty10;. type-checker.unit (type.forall v1 ki ty101)
        )
    )
    case type.unifiable-var 'v1. (analyze-type-checker-M type-checker.get-var v1.
        case nothing. type-checker.unit ty1
    )
    case type.function 'ty10 'ty11. type-checker.for
        'ty101 ← type-checker.subst v ty0 ty10;
        'ty111 ← type-checker.subst v ty0 ty11;
            . type-checker.unit (type.function ty101 ty111)
    case type.const 'c. (analyze gsvar.≡ v c.
        case true. type-checker.unit ty0
        case false. type-checker.unit ty1
    )
|]

gs_type_checker_new_unifiable_var = [gs:value| λ 'env. impfor 'v ← st.ref.new nothing;. impunit (right (type.unifiable-var v)) |]

$gsdeclare view type-var.unifiable-var gstype_var_unifiable_var_view
$gsdeclare view type-var.const gstype_var_const_view

gstype_checker_is_free_in = [gs:value| λ 'v. λ 'ty. analyze ty.
    case type.unifiable-var 'v1. (analyze v.
        case type-var.unifiable-var 'v0. (analyze st.ref.≡ v0 v1.
            case false. (analyze-type-checker-M type-checker.get-var v1.
                case nothing. type-checker.unit false
                case just 'ty1. type-checker.is-free-in v ty1
            )
        )
        case type-var.const _. (analyze-type-checker-M type-checker.get-var v1.
            case nothing. type-checker.unit false
            case just 'ty1. type-checker.is-free-in v ty1
        )
    )
    case type.app 'ty0 'ty1. (analyze-type-checker-M type-checker.is-free-in v ty0.
        case false. type-checker.is-free-in v ty1
    )
    case type.const 'c. (analyze v.
        case type-var.unifiable-var _. type-checker.unit false
    )
    case type.empty-signature. type-checker.unit false
    case type.function 'ty0 'ty1. (analyze-type-checker-M type-checker.is-free-in v ty0.
        case false. type-checker.is-free-in v ty1
    )
|]

gstype_checker_incorrect_type = [gs:value| λ 'pos. λ 'ty0. λ 'ty1. type-checker.for
        's0 ← type-checker.fmt-type ty0;
        's1 ← type-checker.fmt-type ty1;
    . λ 'env. impunit (left (pos.fmt pos qq{Incorrect type: §(s0) is not §(s1)}))
|]

gstype_checker_fmt_type = [gs:value| λ 'ty. analyze ty.
    case type.unifiable-var 'v. (analyze-type-checker-M type-checker.get-var v.
        case nothing. type-checker.unit qq{_}
    )
    case type.const 'c. type-checker.unit (gsvar.fmt-atom c)
    case type.app 'ty0 'ty1. type-checker.for
            's0 ← type-checker.fmt-type ty0;
            's1 ← type-checker.fmt-type ty1;
        . type-checker.unit qq{§(s0) §(s1)}
    case type.function 'ty0 'ty1. type-checker.for
            's0 ← type-checker.fmt-type ty0;
            's1 ← type-checker.fmt-type ty1;
        . type-checker.unit qq{§(s0) → §(s1)}
    case type.empty-signature. type-checker.unit qq{〈〉}
|]

gstype_checker_env_get_type = [gs:value| λ 'pos. λ 'v. λ 'env. analyze type.env.type.get v env.
    case nothing. impunit (left (pos.fmt pos qq{§(gsvar.fmt-atom v) not in scope}))
    case just 'ty. impunit (right ty)
|]

gstype_checker_env_get_implicit = [gs:value| λ 'v. λ 'env. impunit (right (type.env.implicits.get v env)) |]

gstype_checker_for = [gs:value| λ 'gens. λ 'a. type-checker.>>= gens a |]

gstype_checker_analyze = [gs:value| λ 'e. λ 'c. type-checker.>>= e c |]

gstype_checker_foldM = [gs:value| λ 'f. λ 'z. λ 'xn. analyze xn.
    case 'x:'xn1. type-checker.for 'z1 ← f x z;. type-checker.foldM f z1 xn1
|]

gstype_checker_mapM = [gs:value| λ 'f. λ 'xn. analyze xn.
    case nil. type-checker.unit nil
    case 'x:'xn1. type-checker.for 'y ← f x; 'ys1 ← type-checker.mapM f xn1;. type-checker.unit (y : ys1)
|]

gstype_checker_zipWithM = [gs:value| λ 'f. λ 'xn. λ 'ys. analyze xn. -- FIXME: Not parallel!
    case nil. type-checker.unit nil
    case 'x:'xn1. analyze ys.
        case 'y:'ys1. type-checker.for
                'z ← f x y;
                'zs1 ← type-checker.zip-withM f xn1 ys1;
            . type-checker.unit (z : zs1)
|]

gstype_checker_run = [gs:value| λ 'a. λ 'env. st.run (a env) |]

gstype_checker_unit = [gs:value| λ 'x. λ 'env. impunit (right x) |]

gstype_checker_bind = [gs:value| λ 'a. λ 'k. λ 'env. analyze-impM a env.
    case left 'err. impunit (left err)
    case right 'x. k x env
|]

gstype_checker_map = [gs:value| λ 'f. λ 'a. λ 'env. analyze-impM a env.
    case left 'err. impunit (left err)
    case right 'x. impunit (right (f x))
|]

gstype_var_unifiable_var = $gslambda_value $ \ v -> $gsbcconstr (gsvar "unifiable-var") [ $gsav v ]
gstype_var_const = $gslambda_value $ \ v -> $gsbcconstr (gsvar "const") [ $gsav v ]

gstype_var_unifiable_var_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ x -> $gsbcconstr_view "unifiable-var" ek sk x
gstype_var_const_view = $gslambda_value $ \ ek -> $gsbcarg $ \ sk -> $gsbcarg $ \ x -> $gsbcconstr_view "const" ek sk x
