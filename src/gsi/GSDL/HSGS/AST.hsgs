{-# LANGUAGE TemplateHaskell #-}
module GSDL.HSGS.AST (gshsimport_fmt, gshsimport_cmp, gshsexpr_fmt_atom, gshsexpr_applyvar, gshsexpr_var) where

import GSI.Syn (gsvar)
import GSI.Value (gslambda_value, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)
$gsimports

gshsimport_fmt = [gs:value| λ 'i. λ 's. analyze i.
|]

gshsimport_cmp = [gs:value| λ 'i0. λ 'i1. analyze i0.
|]

gshsexpr_fmt_atom = [gs:value| λ 'e. analyze e.
    case hsexpr.var 'v. (<>) v
    case hsexpr.app _ _. (:) r{\(} ∘ hsexpr.fmt e ∘ (:) r{\)}
|]

gshsexpr_fmt = [gs:value| λ 'e. analyze e.
    case hsexpr.var _. hsexpr.fmt-atom e
    case hsexpr.app 'f 'x. hsexpr.fmt f ∘ (:) r{ } ∘ hsexpr.fmt-atom x
|]

gshsexpr_applyvar = [gs:value| λ 'f. λ 'as. foldl hsexpr.app (hsexpr.var f) as |]

gshsexpr_var = $gslambda_value $ \ v -> $gsbcconstr (gsvar "var") [ $gsav v ]
gshsexpr_app = $gslambda_value $ \ f -> $gsbcarg $ \ x -> $gsbcconstr (gsvar "app") [ $gsav f, $gsav x ]

gshsexpr_var_view = $gsbcconstr_view "var"
gshsexpr_app_view = $gsbcconstr_view "app"
