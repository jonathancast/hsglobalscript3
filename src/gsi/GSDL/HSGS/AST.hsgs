{-# LANGUAGE TemplateHaskell #-}
module GSDL.HSGS.AST (gshsimport_fmt, gshsimport_cmp, gshsimport_var, gshsimport_type, gshsexpr_fmt_atom, gshsexpr_applyvar, gshsexpr_var, gshsexpr_app, gshsexpr_int, gshsexpr_string, gshsexpr_list) where

import GSI.Syn (gsvar)
import GSI.Value (gslambda_value, gsav)
import GSI.ByteCode (gsbcarg, gsbcconstr, gsbcconstr_view)
$gsimports

gshsimport_fmt = [gs:value| λ 'i. λ 's. analyze i.
    case hsimport.var 'm 'f. qq{import §(m) (§(f))\n§(s)}
    case hsimport.type 'm 'ty. qq{import §(m) (§(ty)(..))\n§(s)}
|]

gshsimport_cmp = [gs:value| λ 'i0. λ 'i1. analyze i0.
    case hsimport.var 'm0 'v0. (analyze i1.
        case hsimport.type 'm1 'ty1. gt
        case hsimport.var 'm1 'v1. ord.<|> (list.<=> rune.<=> m0 m1) (list.<=> rune.<=> v0 v1)
    )
    case hsimport.type 'm0 'ty0. (analyze i1.
        case hsimport.var 'm1 'v1. lt
        case hsimport.type 'm1 'ty1. ord.<|> (list.<=> rune.<=> m0 m1) (list.<=> rune.<=> ty0 ty1)
    )
|]

gshsimport_var = $gslambda_value $ \ m -> $gsbcarg $ \ f -> $gsbcconstr (gsvar "var") [ $gsav m, $gsav f ]
gshsimport_type = $gslambda_value $ \ m -> $gsbcarg $ \ ty -> $gsbcconstr (gsvar "type") [ $gsav m, $gsav ty ]

gshsimport_var_view = $gsbcconstr_view "var"
gshsimport_type_view = $gsbcconstr_view "type"

$gsdeclare fmt-list gsfmt_list

gshsexpr_fmt_atom = [gs:value| λ 'e. analyze e.
    case hsexpr.var 'v. (<>) v
    case hsexpr.string 's. (:) r{"} ∘ (<>) s ∘ (:) r{"}
    case hsexpr.list 'es. (:) r{\[} ∘ fmt-list es ∘ (:) r{\]}
    case hsexpr.int 'n. (<>) (fmtdecimal n)
    case hsexpr.app _ _. (:) r{\(} ∘ hsexpr.fmt e ∘ (:) r{\)}
|]

$gsdeclare fmt-list-w gsfmt_list_w

gsfmt_list = [gs:value| λ 'es. analyze es.
    case nil. undefined
    case _. (:) r{ } ∘ fmt-list-w es
|]

gsfmt_list_w = [gs:value| λ 'es. analyze es.
    case 'e:nil. hsexpr.fmt e ∘ (:) r{ }
|]

gshsexpr_fmt = [gs:value| λ 'e. analyze e.
    case hsexpr.var _. hsexpr.fmt-atom e
    case hsexpr.app 'f 'x. hsexpr.fmt f ∘ (:) r{ } ∘ hsexpr.fmt-atom x
    case hsexpr.list _. hsexpr.fmt-atom e
|]

gshsexpr_applyvar = [gs:value| λ 'f. λ 'as. foldl hsexpr.app (hsexpr.var f) as |]

gshsexpr_var = $gslambda_value $ \ v -> $gsbcconstr (gsvar "var") [ $gsav v ]
gshsexpr_app = $gslambda_value $ \ f -> $gsbcarg $ \ x -> $gsbcconstr (gsvar "app") [ $gsav f, $gsav x ]
gshsexpr_int = $gslambda_value $ \ n -> $gsbcconstr (gsvar "int") [ $gsav n ]
gshsexpr_string = $gslambda_value $ \ s -> $gsbcconstr (gsvar "string") [ $gsav s ]
gshsexpr_list = $gslambda_value $ \ es -> $gsbcconstr (gsvar "list") [ $gsav es ]

gshsexpr_var_view = $gsbcconstr_view "var"
gshsexpr_string_view = $gsbcconstr_view "string"
gshsexpr_list_view = $gsbcconstr_view "list"
gshsexpr_int_view = $gsbcconstr_view "int"
gshsexpr_app_view = $gsbcconstr_view "app"
