module GSDL.HSGS.Syntax (interpolation, quote) where

$gsimports

$gsdeclare keyword keyword
$gsdeclare hsident hsident

interpolation = [gs:value| λ 'env.
    <|> (keyword qq{gsimports} *> parser.unit source-comp.imports)
    <|> (parser.for
            _ ← keyword qq{gsdeclare};
            'v ← var env;
            'hsv ← hsident;
        . parser.unit $ source-comp.declare v hsv
    )
|]

$gsdeclare quote-param quote_param

$gsdeclare keyword-op keyword_op

quote = [gs:value| λ 'env. λ 'pos0.
    <|> (parser.for
            _ ← keyword qq{value};
            'ps ← many $ quote-param env;
            _ ← keyword-op qq{|};
            'pos1 ← get-pos;
            'e ← expr env;
        . parser.unit (source-comp.value pos0 ps pos1 (e #0))
    )
    <|> (parser.for
            _ ← keyword qq{expr};
            'ps ← many $ quote-param env;
            _ ← keyword-op qq{|};
            'pos1 ← get-pos;
            'e ← expr env;
        . parser.unit (source-comp.expr ps pos1 (e #0))
    )
|]

quote_param = [gs:value| λ 'env.
    <|> (parser.for
            _ ← keyword qq{hsvs};
            _ ← keyword-op qq{=};
            'vs ← many (var env <* lexeme (char r{,}));
        . parser.unit $ quote-param.hsvs vs
    )
|]

keyword = [gs:value| λ 'kw. lexeme $ parser.for 's ← ident-chars;. analyze list.≡ rune.≡ s kw.
    case false. parser.fail log{'§(log.str s)' is not '§(log.str kw)'}
    case true. parser.unit 〈〉
|]

keyword_op = [gs:value| λ 'kw. lexeme $ parser.for 's ← op-chars;. analyze list.≡ rune.≡ s kw.
    case true. parser.unit 〈〉
|]

$gsdeclare hsident-start-char hsident_start_char
$gsdeclare hsident-comp-char hsident_comp_char

hsident = [gs:value| lexeme (parser.map2 (:) hsident-start-char (max-many hsident-comp-char)) |]

hsident_start_char = [gs:value| matching log{HS ident start char} is-lower |]
hsident_comp_char = [gs:value| matching log{HS ident cont char} (λ 'c. is-letter c || is-ascii-digit c || rune.≡ c r{_}) |]
