module GSDL.HSGS.Compiler (gshsgs_compiler_env_var_insert, gshsgs_compiler_env_var_get, gshsgs_compiler_env_view_insert, gshsgs_compiler_env_view_get, gshsgs_compiler_env_gen_sym, gshsgs_compiler_env_generator_get, gshsgs_compiler_env_generator_modify, gshsgs_compiler_env_unary_get, gshsgs_compiler_env_unary_modify, gshsgs_compiler_env_arg_var_insert, gshsgs_compiler_env_arg_var_get, gshsgs_compiler_env_empty, gshsgs_compiler_supply_env_here_insert, gshsgs_compiler_supply_env_here_get, gshsgs_compiler_supply_env_monad_get, gshsgs_compiler_supply_env_empty) where

$gsimports

gshsgs_compiler_env_gen_sym = [gs:value| λ 'env. λ 'k. k qq{x§(natural.fmt-decimal (env #gen-sym))} $
    record.∧ 〈 'gen-sym ∝ env #gen-sym + 1; 〉 env
|]

gshsgs_compiler_env_var_insert = [gs:value| λ 'v. λ 'a. λ 'env.  record.∧ 〈 'vars ∝ ordered-map.insert gsvar.compare v a (env #vars); 〉 env |]

gshsgs_compiler_env_view_insert = [gs:value| λ 'v. λ 'a. λ 'env. record.∧ 〈 'views ∝ ordered-map.insert gsvar.compare v a (env #views); 〉 env |]

gshsgs_compiler_env_arg_var_insert = [gs:value| λ 'v. λ 'f. λ 'env. record.∧ 〈 'arg-vars ∝ ordered-map.insert gsvar.compare v f (env #arg-vars); 〉 env |]

gshsgs_compiler_env_var_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #vars) |]
gshsgs_compiler_env_view_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #views) |]
gshsgs_compiler_env_arg_var_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #arg-vars) |]

gshsgs_compiler_env_generator_get = [gs:value| λ 'env. 〈
    'vars ∝ env #generators;
    'gen-sym ∝ env #gen-sym;
〉 |]

gshsgs_compiler_env_unary_get = [gs:value| λ 'env. 〈
    'vars ∝ env #unaries;
    'gen-sym ∝ env #gen-sym;
〉 |]

gshsgs_compiler_env_generator_modify = [gs:value| λ 'f. λ 'env. for
        'env2 ∝ for 'env1 ∝ f (hsgs.compiler.env.generator.get env);. 〈
            'generators ∝ env1 #vars;
            'gen-sym ∝ env1 #gen-sym;
        〉;
    . record.∧ env2 env
|]

gshsgs_compiler_env_unary_modify = [gs:value| λ 'f. λ 'env. for
        'env2 ∝ for 'env1 ∝ f (hsgs.compiler.env.unary.get env);. 〈
            'unaries ∝ env1 #vars;
            'gen-sym ∝ env1 #gen-sym;
        〉;
    . record.∧ env2 env
|]

gshsgs_compiler_env_empty = [gs:value| 〈
    'vars ∝ ordered-map.empty;
    'unaries ∝ ordered-map.empty;
    'views ∝ ordered-map.empty;
    'generators ∝ ordered-map.empty;
    'arg-vars ∝ ordered-map.empty;
    'gen-sym ∝ 0;
〉 |]

gshsgs_compiler_supply_env_here_insert = [gs:value| λ 'here. λ 'env. record.∧ 〈 'here ∝ just here; 〉 env |]

gshsgs_compiler_supply_env_here_get = [gs:value| λ 'env. env #here |]
gshsgs_compiler_supply_env_monad_get = [gs:value| λ 'env. env #monad |]

gshsgs_compiler_supply_env_empty = [gs:value| 〈 'here ∝ nothing; 'monad ∝ nothing; 〉 |]
