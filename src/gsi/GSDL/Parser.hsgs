{-# LANGUAGE TemplateHaskell #-}

module GSDL.Parser (
    gsdl_parser_env_signatures_get, gsdl_parser_env_signature_get, gsdl_parser_env_signature_insert,
    gsdl_parser_env_syntactic_category_get, gsdl_parser_env_syntactic_category_insert,
    gsdl_parser_env_qlo_get, gsdl_parser_env_qlo_insert,
    gsdl_parser_env_missing_body_get, gsdl_parser_env_missing_body_insert,
    gsdl_parser_env_else_get, gsdl_parser_env_else_insert,
    gsdl_parser_env_missing_else_get, gsdl_parser_env_missing_else_insert,
    gsdl_parser_env_else_needs_comma_get, gsdl_parser_env_else_needs_comma_set,
    gsdl_parser_env_generator_get, gsdl_parser_env_generator_modify,
    gsdl_parser_env_empty
  ) where

$gsimports

gsdl_parser_env_signatures_get = [gs:value| λ 'env. ordered-map.values (env #signature) |]
gsdl_parser_env_signature_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #signature) |]
gsdl_parser_env_syntactic_category_get = [gs:value| λ 'v. λ 'env. analyze ordered-map.get gsvar.compare v (env #syntactic-category).
    case just 'c. c
    case nothing. syntactic-category.variable
|]
gsdl_parser_env_qlo_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #qlo) |]
gsdl_parser_env_missing_body_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #missing-body) |]
gsdl_parser_env_else_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #else) |]
gsdl_parser_env_missing_else_get = [gs:value| λ 'v. λ 'env. ordered-map.get gsvar.compare v (env #missing-else) |]
gsdl_parser_env_else_needs_comma_get = [gs:value| λ 'env. env #else-needs-comma |]

gsdl_parser_env_generator_get = [gs:value| λ 'env. 〈
    'signature ∝ env #generator.signature;
    'else-needs-comma ∝ env #else-needs-comma;
〉 |]
gsdl_parser_env_generator_set = [gs:value| λ 'env1. λ 'env. record.∧
    〈
        'else-needs-comma ∝ env1 #else-needs-comma;
        'generator.signature ∝ env1 #signature;
    〉
    env
|]
gsdl_parser_env_generator_modify = [gs:value| λ 'f. λ 'env. parser.env.generator.set (f (parser.env.generator.get env)) env |]

gsdl_parser_env_syntactic_categories = [gs:value| λ 'env. ordered-map.to-list (env #syntactic-category) |]

gsdl_parser_env_signature_insert = [gs:value| λ 'v. λ 's. λ 'env. record.∧ 〈 'signature ∝ ordered-map.insert gsvar.compare v s (env #signature); 〉 env |]
gsdl_parser_env_syntactic_category_insert = [gs:value| λ 'v. λ 'c. λ 'env. record.∧ 〈 'syntactic-category ∝ ordered-map.insert gsvar.compare v c (env #syntactic-category); 〉 env |]
gsdl_parser_env_qlo_insert = [gs:value| λ 'v. λ 'e. λ 'env. record.∧ 〈 'qlo ∝ ordered-map.insert gsvar.compare v e (env #qlo); 〉 env |]
gsdl_parser_env_missing_body_insert = [gs:value| λ 'v. λ 'm. λ 'env. record.∧ 〈 'missing-body ∝ ordered-map.insert gsvar.compare v m (env #missing-body); 〉 env |]
gsdl_parser_env_else_insert = [gs:value| λ 'v. λ 'e. λ 'env. record.∧ 〈 'else ∝ ordered-map.insert gsvar.compare v e (env #else); 〉 env |]
gsdl_parser_env_missing_else_insert = [gs:value| λ 'v. λ 'e. λ 'env. record.∧ 〈 'missing-else ∝ ordered-map.insert gsvar.compare v e (env #missing-else); 〉 env |]
gsdl_parser_env_else_needs_comma_set = [gs:value| λ 'b. λ 'env. record.∧ 〈 'else-needs-comma ∝ b; 〉 env |]

gsdl_parser_env_empty = [gs:value| 〈
    'signature ∝ ordered-map.empty;
    'syntactic-category ∝ ordered-map.empty;
    'qlo ∝ ordered-map.empty;
    'missing-body ∝ ordered-map.empty;
    'else ∝ ordered-map.empty;
    'missing-else ∝ ordered-map.empty;
    'else-needs-comma ∝ true;
    'generator.signature ∝ ordered-map.empty;
〉 |]
