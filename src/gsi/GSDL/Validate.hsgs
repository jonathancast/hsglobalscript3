module GSDL.Validate (gsvalidate_document, gsvalidate_qloitem) where

$gsimports

$gsdeclare validate-expr gsvalidate_expr

gsvalidate_document = [gs:value| λ 'pos. λ 'env. λ 'd. analyze d.
    case document.in 'mbe 'mbg. either.for
            _ ← analyze mbe.
                case nothing. right 〈〉
                case just 'e. validate-expr pos env e
            ;
            _ ← analyze mbg.
                case nothing. right 〈〉
            ;
        . right 〈〉
|]

$gsdeclare validate-arg gsvalidate_arg
$gsdeclare validate-pat gsvalidate_pat

gsvalidate_expr = [gs:value| λ 'pos. λ 'env. λ 'e. analyze e.
    case expr.var 'v. right 〈〉
    case expr.natural 'n. right 〈〉
    case expr.qlo 'v 'e 'x. e #validate pos env x
    case expr.app 'f 'a. either.for _ ← validate-expr pos env f; _ ← validate-arg pos env a;. right 〈〉
    case expr.fallible-pat 'p _. validate-pat pos env p
    case expr.pat 'p _. validate-pat pos env p
    case expr.open-expr 'e1 (just 'bvs). either.for
            _ ← either.mapM
                (λ 'v. analyze validator.env.in-scope v env.
                    case false. right 〈〉
                    case true. left (pos.fmt pos qq{§(gsvar.fmt-atom v) is already in scope})
                )
                bvs
            ;
            'env1 ← right $ foldr (λ 'v. λ 'env0. validator.env.in-scope.insert v env0) env bvs;
        . validate-expr pos env1 e1
    case expr.missing-case. right 〈〉
|]

gsvalidate_arg = [gs:value| λ 'pos. λ 'env. λ 'a. analyze a.
    case arg.expr 'pos1 'e. validate-expr pos1 env e
    case arg.explicit 'pos1 'e. validate-expr pos1 env e
    case arg.app 'f 'x. either.for
            _ ← validate-arg pos env f;
            _ ← validate-arg pos env x;
        . right 〈〉
    case arg.var _. right 〈〉
    case arg.var-name _. right 〈〉
|]

gsvalidate_qloitem = [gs:value| λ 'pos. λ 'env. λ 'q. analyze q.
    case qloitem.char 'ch. right 〈〉
|]

gsvalidate_pat = [gs:value| λ 'pos. λ 'env. λ 'p. analyze p.
    case pat.discard. right 〈〉
    case pat.var 'v. right 〈〉
    case pat.view 'v. right 〈〉
    case pat.app 'p0 'pos 'p1. either.for
            _ ← validate-pat pos env p0;
            _ ← validate-pat pos env p1;
            'bvs0 ← right (pat.bound-vars p0);
            'bvs1 ← right (pat.bound-vars p1);
            _ ← either.mapM (λ 'v. analyze list.∈ gsvar.≡ v bvs1. case false. right 〈〉) bvs0;
        . right 〈〉
|]
